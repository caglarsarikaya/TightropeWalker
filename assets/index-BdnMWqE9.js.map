{"version":3,"file":"index-BdnMWqE9.js","sources":["../../src/views/CameraController.js","../../src/models/Character.js","../../src/models/Physics.js","../../src/views/UIManager.js","../../src/viewmodels/GameState.js","../../node_modules/three/examples/jsm/math/SimplexNoise.js","../../src/models/Environment.js","../../src/Game.js"],"sourcesContent":["/**\n * CameraController.js\n * Manages camera positions, movements and animations\n * Handles different camera behaviors for different game states\n * Enhanced with mouse controls for manual camera manipulation:\n * - Left-click and drag to orbit around the character\n * - Right-click and drag to pan the camera\n * - Mouse wheel to zoom in and out\n */\n\nimport * as THREE from 'three';\n\nclass CameraController {\n    /**\n     * Initialize the camera controller\n     * @param {THREE.Scene} scene - The Three.js scene\n     * @param {THREE.Camera} camera - The Three.js camera\n     */\n    constructor(scene, camera) {\n        this.scene = scene;\n        this.camera = camera;\n        \n        // Camera animation properties\n        this.targetPosition = new THREE.Vector3();\n        this.targetLookAt = new THREE.Vector3();\n        this.currentLookAt = new THREE.Vector3();\n        this.isAnimating = false;\n        this.animationDuration = 2.0; // seconds\n        this.animationProgress = 0;\n        this.currentAnimationSpeed = 0.1; // Default animation speed\n        \n        // Default camera positions\n        this.startPosition = new THREE.Vector3(0, 50, 120);\n        this.startLookAt = new THREE.Vector3(0, 0, 0);\n        \n        this.gameplayPosition = new THREE.Vector3(0, 10, 20);\n        this.gameplayLookAt = new THREE.Vector3(0, 0, -15);\n        \n        this.platformFocusPosition = new THREE.Vector3(0, 8, 15);\n        this.platformFocusLookAt = new THREE.Vector3(0, 0, -50);\n        \n        // Character reference for following\n        this.character = null;\n        this.environment = null;\n        \n        // Mouse control properties\n        this.isLeftMouseDown = false;\n        this.isRightMouseDown = false;\n        this.mouseX = 0;\n        this.mouseY = 0;\n        this.lastMouseX = 0;\n        this.lastMouseY = 0;\n        this.mouseSensitivity = 0.2; // Reduced from 0.5 to make camera movement less sensitive\n        this.zoomSpeed = 0.5; // Reduced for smoother zooming\n        this.enableMouseControls = false; // Will be enabled during gameplay\n        this.orbitRadius = 15; // Reduced from 30 to position the camera closer to character\n        this.orbitAngleHorizontal = 0; // Horizontal rotation angle in radians\n        this.orbitAngleVertical = 0.5; // Vertical rotation angle in radians (0 = horizon, π/2 = directly above)\n        this.minVerticalAngle = 0.1; // Prevent camera from going too low\n        this.maxVerticalAngle = Math.PI / 2 - 0.1; // Prevent camera from going too high\n        \n        // Damping for smoother camera movements\n        this.dampingFactor = 0.92;\n        this.velocityX = 0;\n        this.velocityY = 0;\n        \n        // Enhanced follow target properties\n        this.followTarget = null;\n        this.followOffset = new THREE.Vector3(0, 3, 8);\n        this.followLerpFactor = 0.1; // Smoothing factor (0-1)\n        this.currentTargetPosition = new THREE.Vector3();\n        this.currentLookAtPosition = new THREE.Vector3();\n        \n        // Set initial camera position\n        this.camera.position.copy(this.startPosition);\n        this.currentLookAt.copy(this.startLookAt);\n        this.camera.lookAt(this.currentLookAt);\n        \n        // Bind event handlers\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.onMouseUp = this.onMouseUp.bind(this);\n        this.onContextMenu = this.onContextMenu.bind(this);\n        this.onWheel = this.onWheel.bind(this);\n        \n        // Setup event listeners\n        this.setupMouseControls();\n    }\n    \n    /**\n     * Set up mouse control event listeners\n     */\n    setupMouseControls() {\n        document.addEventListener('mousedown', this.onMouseDown);\n        document.addEventListener('mousemove', this.onMouseMove);\n        document.addEventListener('mouseup', this.onMouseUp);\n        document.addEventListener('contextmenu', this.onContextMenu);\n        document.addEventListener('wheel', this.onWheel);\n    }\n    \n    /**\n     * Clean up mouse control event listeners\n     */\n    removeMouseControls() {\n        document.removeEventListener('mousedown', this.onMouseDown);\n        document.removeEventListener('mousemove', this.onMouseMove);\n        document.removeEventListener('mouseup', this.onMouseUp);\n        document.removeEventListener('contextmenu', this.onContextMenu);\n        document.removeEventListener('wheel', this.onWheel);\n    }\n    \n    /**\n     * Handle mouse down event\n     * @param {MouseEvent} event - The mouse event\n     */\n    onMouseDown(event) {\n        if (!this.enableMouseControls) return;\n        \n        if (event.button === 0) { // Left mouse button\n            this.isLeftMouseDown = true;\n        } else if (event.button === 2) { // Right mouse button\n            this.isRightMouseDown = true;\n        }\n        \n        this.lastMouseX = event.clientX;\n        this.lastMouseY = event.clientY;\n    }\n    \n    /**\n     * Handle mouse move event\n     * @param {MouseEvent} event - The mouse event\n     */\n    onMouseMove(event) {\n        if (!this.enableMouseControls) return;\n        \n        const deltaX = event.clientX - this.lastMouseX;\n        const deltaY = event.clientY - this.lastMouseY;\n        \n        if (this.isLeftMouseDown) {\n            // Add some acceleration with damping for smoother orbiting\n            this.velocityX = this.velocityX * this.dampingFactor + deltaX * 0.01;\n            this.velocityY = this.velocityY * this.dampingFactor + deltaY * 0.01;\n            \n            // Handle camera rotation/orbit with left mouse button\n            this.orbitAngleHorizontal -= this.velocityX * this.mouseSensitivity;\n            this.orbitAngleVertical += this.velocityY * this.mouseSensitivity;\n            \n            // Clamp vertical angle to prevent going underneath or too far overhead\n            this.orbitAngleVertical = Math.max(\n                this.minVerticalAngle, \n                Math.min(this.maxVerticalAngle, this.orbitAngleVertical)\n            );\n            \n            // Only update camera immediately if not animating\n            if (!this.isAnimating) {\n                this.updateOrbitCamera();\n            }\n        }\n        \n        if (this.isRightMouseDown) {\n            // Handle camera panning with right mouse button\n            // Calculate pan direction in camera's local space\n            const right = new THREE.Vector3(1, 0, 0).applyQuaternion(this.camera.quaternion);\n            const up = new THREE.Vector3(0, 1, 0).applyQuaternion(this.camera.quaternion);\n            \n            // Scale the movement by sensitivity and current distance from target\n            const distanceScale = this.orbitRadius * 0.01;\n            \n            // Move the camera and lookAt point\n            right.multiplyScalar(-deltaX * this.mouseSensitivity * distanceScale);\n            up.multiplyScalar(deltaY * this.mouseSensitivity * distanceScale);\n            \n            this.camera.position.add(right).add(up);\n            this.currentLookAt.add(right).add(up);\n            \n            // Update the orbit center\n            this.targetLookAt.copy(this.currentLookAt);\n        }\n        \n        this.lastMouseX = event.clientX;\n        this.lastMouseY = event.clientY;\n    }\n    \n    /**\n     * Handle mouse up event\n     * @param {MouseEvent} event - The mouse event\n     */\n    onMouseUp(event) {\n        if (event.button === 0) { // Left mouse button\n            this.isLeftMouseDown = false;\n            \n            // Keep some inertia after releasing the mouse button\n            setTimeout(() => {\n                this.velocityX = 0;\n                this.velocityY = 0;\n            }, 300);\n        } else if (event.button === 2) { // Right mouse button\n            this.isRightMouseDown = false;\n        }\n    }\n    \n    /**\n     * Prevent context menu from showing on right-click\n     * @param {MouseEvent} event - The context menu event\n     */\n    onContextMenu(event) {\n        if (this.enableMouseControls) {\n            event.preventDefault();\n        }\n    }\n    \n    /**\n     * Handle mouse wheel event for zooming\n     * @param {WheelEvent} event - The wheel event\n     */\n    onWheel(event) {\n        if (!this.enableMouseControls) return;\n        \n        // Prevent page scrolling\n        event.preventDefault();\n        \n        // Calculate zoom factor based on wheel delta\n        const zoomAmount = event.deltaY * this.zoomSpeed * 0.01;\n        this.orbitRadius += zoomAmount;\n        \n        // Clamp orbit radius to reasonable values\n        this.orbitRadius = Math.max(5, Math.min(200, this.orbitRadius));\n        \n        // Only update camera immediately if not animating\n        if (!this.isAnimating) {\n            this.updateOrbitCamera();\n        }\n    }\n    \n    /**\n     * Update camera position based on orbit parameters\n     */\n    updateOrbitCamera() {\n        // Calculate camera position in spherical coordinates\n        const sinV = Math.sin(this.orbitAngleVertical);\n        const cosV = Math.cos(this.orbitAngleVertical);\n        const sinH = Math.sin(this.orbitAngleHorizontal);\n        const cosH = Math.cos(this.orbitAngleHorizontal);\n        \n        // Convert to Cartesian coordinates\n        const x = this.orbitRadius * cosV * sinH;\n        const y = this.orbitRadius * sinV;\n        const z = this.orbitRadius * cosV * cosH;\n        \n        // Set camera position relative to look-at point\n        this.camera.position.set(\n            this.currentLookAt.x + x,\n            this.currentLookAt.y + y,\n            this.currentLookAt.z + z\n        );\n        \n        // Update camera orientation\n        this.camera.lookAt(this.currentLookAt);\n    }\n    \n    /**\n     * Set target for camera to follow\n     * @param {THREE.Object3D} target - Object to follow\n     */\n    setFollowTarget(target) {\n        this.followTarget = target;\n        \n        // Initialize current positions if target is set\n        if (target) {\n            const position = target.position.clone();\n            this.currentTargetPosition.copy(this.camera.position);\n            this.currentLookAtPosition.copy(position);\n        }\n    }\n    \n    /**\n     * Clear the follow target\n     */\n    clearFollowTarget() {\n        this.followTarget = null;\n    }\n    \n    /**\n     * Update camera position when following a target\n     * @param {THREE.Vector3} targetPosition - Target position for camera\n     * @param {THREE.Vector3} lookAtPosition - Position to look at\n     * @param {number} deltaTime - Time since last update\n     */\n    updateFollowPosition(targetPosition, lookAtPosition, deltaTime) {\n        if (!this.enableMouseControls) { // Only update if in auto mode\n            // Smoothly interpolate to the target position\n            this.currentTargetPosition.lerp(targetPosition, this.followLerpFactor);\n            this.currentLookAtPosition.lerp(lookAtPosition, this.followLerpFactor);\n            \n            // Update camera position\n            this.camera.position.copy(this.currentTargetPosition);\n            \n            // Make camera look at target\n            this.camera.lookAt(this.currentLookAtPosition);\n            \n            // Update current look-at for consistency across different camera control modes\n            this.currentLookAt.copy(this.currentLookAtPosition);\n        }\n    }\n    \n    /**\n     * Enable or disable mouse controls\n     * @param {boolean} enabled - Whether mouse controls should be enabled\n     */\n    setMouseControlsEnabled(enabled) {\n        this.enableMouseControls = enabled;\n        \n        // If enabling, initialize orbit parameters based on current camera position\n        if (enabled) {\n            // Calculate current distance from camera to look-at point\n            const offset = new THREE.Vector3().subVectors(this.camera.position, this.currentLookAt);\n            this.orbitRadius = offset.length();\n            \n            // Calculate horizontal and vertical angles from current position\n            this.orbitAngleHorizontal = Math.atan2(offset.x, offset.z);\n            this.orbitAngleVertical = Math.asin(Math.min(1, Math.max(-1, offset.y / this.orbitRadius)));\n        }\n    }\n    \n    /**\n     * Set references to game objects\n     * @param {Character} character - Reference to character\n     * @param {Environment} environment - Reference to environment\n     */\n    setReferences(character, environment) {\n        this.character = character;\n        this.environment = environment;\n    }\n    \n    /**\n     * Animate camera to start position\n     */\n    animateToStartPosition() {\n        // Dramatic overview of both mountains\n        const position = this.startPosition.clone();\n        const lookAt = this.startLookAt.clone();\n        \n        // Add subtle movement\n        position.x += (Math.random() - 0.5) * 10;\n        \n        this.animateToPosition(position, lookAt, 2.5);\n        \n        // Disable mouse controls for intro\n        this.setMouseControlsEnabled(false);\n    }\n    \n    /**\n     * Animate camera to gameplay position\n     */\n    animateToGameplayPosition() {\n        // Check if we have references to calculate better positions\n        if (this.character && this.character.model && this.environment && \n            this.environment.startPlatformPosition) {\n            \n            // First, focus on the character on the platform\n            this.animateToPlatformFocus();\n            \n            // After a delay, transition to gameplay position\n            setTimeout(() => {\n                const characterPos = this.character.model.position.clone();\n                \n                // Position behind and slightly above character - closer third-person view\n                const position = new THREE.Vector3(\n                    characterPos.x, \n                    characterPos.y + 3, // Was +5, lowered to +3\n                    characterPos.z + 8   // Was +15, lowered to +8\n                );\n                \n                // Look ahead on the rope - closer to character\n                const lookAt = new THREE.Vector3(\n                    characterPos.x,\n                    characterPos.y + 1, // Added +1 to look slightly higher\n                    characterPos.z - 10 // Was -20, changed to -10 to look closer\n                );\n                \n                // Set follow target for continuous following\n                this.setFollowTarget(this.character.model);\n                \n                // Animate with faster speed for gameplay\n                this.currentAnimationSpeed = 0.15;\n                this.animateToPosition(position, lookAt, 1.8);\n                \n                // Enable mouse controls after animation is complete\n                setTimeout(() => {\n                    this.setMouseControlsEnabled(true);\n                }, 2000);\n                \n            }, 3000); // 3 second delay\n        } else {\n            // Fallback to predefined position if references not available\n            this.gameplayPosition = new THREE.Vector3(0, 5, 8); // Adjust default position too\n            this.gameplayLookAt = new THREE.Vector3(0, 1, -10); // Adjust default look-at too\n            this.animateToPosition(this.gameplayPosition, this.gameplayLookAt);\n            \n            // Enable mouse controls after animation is complete\n            setTimeout(() => {\n                this.setMouseControlsEnabled(true);\n            }, 3000);\n        }\n    }\n    \n    /**\n     * Animate camera to focus on the starting platform\n     */\n    animateToPlatformFocus() {\n        if (!this.environment || !this.environment.startPlatformPosition) {\n            return;\n        }\n        \n        // Get platform position\n        const platformPos = this.environment.startPlatformPosition.clone();\n        \n        // Calculate dramatic position to view the platform\n        const position = new THREE.Vector3(\n            platformPos.x + 10, \n            platformPos.y + 6, \n            platformPos.z + 10\n        );\n        \n        // Look at platform with slight offset to see character\n        const lookAt = new THREE.Vector3(\n            platformPos.x,\n            platformPos.y + 1,\n            platformPos.z - 3\n        );\n        \n        // Use slower speed for more dramatic effect\n        this.currentAnimationSpeed = 0.06;\n        this.animateToPosition(position, lookAt, 3.0);\n    }\n    \n    /**\n     * Animate camera to a specific position and look-at point\n     * @param {THREE.Vector3} position - Target position\n     * @param {THREE.Vector3} lookAt - Target look-at point\n     * @param {number} duration - Animation duration in seconds (optional)\n     */\n    animateToPosition(position, lookAt, duration = null) {\n        this.isAnimating = true;\n        this.animationProgress = 0;\n        \n        if (duration !== null) {\n            this.animationDuration = duration;\n        }\n        \n        this.targetPosition.copy(position);\n        this.targetLookAt.copy(lookAt);\n    }\n    \n    /**\n     * Update camera animation\n     * @param {number} deltaTime - Time since last update in seconds\n     */\n    update(deltaTime) {\n        if (this.isAnimating) {\n            // Update animation progress\n            this.animationProgress += deltaTime / this.animationDuration;\n            \n            if (this.animationProgress >= 1.0) {\n                // Animation complete\n                this.animationProgress = 1.0;\n                this.isAnimating = false;\n            }\n            \n            // Use smoothstep for ease-in-out animation\n            const t = this.smoothstep(this.animationProgress);\n            \n            // Interpolate camera position\n            this.camera.position.lerpVectors(\n                this.camera.position,\n                this.targetPosition,\n                t * this.currentAnimationSpeed\n            );\n            \n            // Interpolate look-at position\n            this.currentLookAt.lerpVectors(\n                this.currentLookAt,\n                this.targetLookAt,\n                t * this.currentAnimationSpeed\n            );\n            \n            // Update camera orientation\n            this.camera.lookAt(this.currentLookAt);\n        } else if (this.enableMouseControls) {\n            // Mouse controls are active and no animation is in progress\n            // Camera position updates are handled by mouse events\n        } else if (this.followTarget && !this.enableMouseControls) {\n            // Follow target if set and not in mouse control mode\n            this.updateFollowingBehavior(deltaTime);\n        } else if (this.character && this.character.model && \n                  !this.character.isOnPlatform && this.character.state !== 'FALLING') {\n            // Legacy follow behavior from existing code, when no explicit follow target is set\n            this.followTarget(this.character.model.position);\n        }\n    }\n    \n    /**\n     * Update the following behavior\n     * @param {number} deltaTime - Time since last update\n     */\n    updateFollowingBehavior(deltaTime) {\n        if (!this.followTarget) return;\n        \n        const targetPos = this.followTarget.position.clone();\n        \n        // Check if character is on platform to apply direction-based offset\n        if (this.character && this.character.isOnPlatform) {\n            const facingDirection = this.character.facingDirection;\n            \n            // Calculate direction-aware camera position\n            const offset = new THREE.Vector3(\n                Math.sin(facingDirection) * this.followOffset.z,\n                this.followOffset.y,\n                Math.cos(facingDirection) * this.followOffset.z\n            );\n            \n            // Set target position behind character based on facing direction\n            const desiredPosition = new THREE.Vector3(\n                targetPos.x - offset.x,\n                targetPos.y + offset.y,\n                targetPos.z - offset.z\n            );\n            \n            // Smoothly interpolate current position\n            this.camera.position.lerp(desiredPosition, this.followLerpFactor);\n            \n            // Look at position in front of character based on facing direction\n            const lookAhead = new THREE.Vector3(\n                Math.sin(facingDirection) * 5,\n                1,\n                Math.cos(facingDirection) * 5\n            );\n            \n            const lookAtPoint = new THREE.Vector3(\n                targetPos.x + lookAhead.x,\n                targetPos.y + lookAhead.y,\n                targetPos.z + lookAhead.z\n            );\n            \n            this.currentLookAt.lerp(lookAtPoint, this.followLerpFactor * 1.5);\n        } else {\n            // Standard follow behavior for rope walking\n            const desiredPosition = new THREE.Vector3(\n                targetPos.x,\n                targetPos.y + this.followOffset.y,\n                targetPos.z + this.followOffset.z\n            );\n            \n            this.camera.position.lerp(desiredPosition, this.followLerpFactor);\n            this.currentLookAt.lerp(targetPos, this.followLerpFactor * 1.5);\n        }\n        \n        // Update camera to look at the target\n        this.camera.lookAt(this.currentLookAt);\n    }\n    \n    /**\n     * Legacy follow method\n     * @param {THREE.Vector3} targetPosition - Position to follow\n     */\n    followTarget(targetPosition) {\n        // Offset from target - more like a standard third-person camera\n        // Closer behind and slightly above, like in FPS games\n        const offset = new THREE.Vector3(0, 3, 8); // Reduced distance (was 0, 5, 15)\n        \n        // Set camera position relative to target with smooth interpolation\n        const desiredPosition = targetPosition.clone().add(offset);\n        this.camera.position.lerp(desiredPosition, 0.05);\n        \n        // Look at target plus a forward vector (closer to character)\n        const lookAtPoint = targetPosition.clone().add(new THREE.Vector3(0, 1, -5)); // Was (0, 0, -10)\n        this.currentLookAt.lerp(lookAtPoint, 0.1);\n        this.camera.lookAt(this.currentLookAt);\n    }\n    \n    /**\n     * Smoothstep function for smooth animation\n     * @param {number} x - Input value between 0 and 1\n     * @returns {number} - Smoothed value between 0 and 1\n     * @private\n     */\n    smoothstep(x) {\n        return x * x * (3 - 2 * x);\n    }\n}\n\nexport { CameraController }; ","/**\n * Character.js\n * Manages the tightrope walker character model, animations, and state\n * Handles movement and balance controls for the character\n */\n\nimport * as THREE from 'three';\n\nclass Character {\n    /**\n     * Initialize the character\n     * @param {THREE.Scene} scene - The Three.js scene\n     * @param {THREE.Mesh} rope - The rope mesh\n     * @param {Environment} environment - Reference to environment for platform positions\n     */\n    constructor(scene, rope, environment) {\n        this.scene = scene;\n        this.rope = rope;\n        this.environment = environment;\n        \n        // Character properties\n        this.model = null;\n        this.mixer = null;\n        this.animations = {};\n        this.currentAnimation = null;\n        this.balance = 0; // -1 (left) to 1 (right)\n        this.speed = 0; // Current movement speed\n        this.maxSpeed = 5; // Maximum movement speed\n        this.position = 0; // Position along rope (0 to 1)\n        this.state = 'IDLE'; // IDLE, WALKING, BALANCING, FALLING\n        this.isOnPlatform = true; // Start on platform\n        this.prevState = ''; // Track previous state for animation changes\n        this.prevBalance = 0; // Track previous balance for animation changes\n        \n        // Body parts for animation\n        this.head = null;\n        this.torso = null;\n        this.leftArm = null;\n        this.rightArm = null;\n        this.leftLeg = null;\n        this.rightLeg = null;\n        this.balancePole = null;\n        \n        // Character dimensions\n        this.height = 2;\n        this.width = 0.5;\n        \n        // Movement properties\n        this.acceleration = 1;\n        this.deceleration = 2;\n        this.balanceForce = 0; // Force applied by player (-1 to 1)\n        \n        // Animation timers\n        this.animationClock = new THREE.Clock();\n        this.walkCycle = 0;\n        this.balanceCycle = 0;\n        \n        // Step-based movement system for rope\n        this.isMovingForward = false; // Track if forward key is being held\n        this.takingStep = false; // Currently in the process of taking a step\n        this.stepDistance = 0.03; // Distance to move in one step (0.03 = 3% of rope length)\n        this.stepTime = 0.5; // Time in seconds to complete one step\n        this.stepTimer = 0; // Timer for current step\n        this.stepStartPosition = 0; // Where the step started\n        this.stepTargetPosition = 0; // Where the step will end\n        this.canTakeNextStep = true; // Whether we can take another step (prevents key repeats)\n        \n        // Balance disturbance properties\n        this.movementBalanceEffect = 0.1; // How much walking affects balance\n        this.windEffect = 0; // Track current wind effect (set by Game.js)\n        this.balanceNoiseTimer = 0; // Timer for random balance disturbances\n        this.balanceNoiseInterval = 0.5; // How often to apply random disturbances\n        this.balanceNoiseMagnitude = 0.01; // Magnitude of random disturbances\n        \n        // Extended balance mechanics\n        this.continuousWalkingTime = 0; // How long player has been walking without stopping\n        this.distanceWalked = 0; // Distance walked without stopping\n        this.maxBalanceDifficulty = 4; // Maximum multiplier for balance difficulty\n        this.balanceRecoveryRate = 0.7; // How quickly balance recovers when stopped\n        this.balanceDifficulty = 1; // Current balance difficulty multiplier\n        this.totalStepsTaken = 0; // Track total steps for balance difficulty\n        \n        // Platform movement properties\n        this.platformMovement = {\n            forward: false,  // W key\n            backward: false, // S key\n            left: false,     // A key\n            right: false,    // D key\n            rotateLeft: false, // Q key\n            rotateRight: false // E key\n        };\n        this.platformPosition = new THREE.Vector3(); // Position on platform\n        this.platformSpeed = 2.0;  // Movement speed on platforms\n        this.platformRotationSpeed = 2.0; // Turning speed on platforms\n        this.facingDirection = 0;  // Direction in radians (0 = +Z axis)\n        this.onRopeEdge = false;   // Flag for when character is at rope edge of platform\n        \n        // Enhanced platform movement\n        this.footstepCycle = 0;    // Cycle for footstep effects\n        this.lastFootstep = 0;     // Time since last footstep\n        this.footstepInterval = 0.4; // Time between footsteps\n        this.bodyBobHeight = 0;    // Current body bob height\n        this.strideBobAmount = 0.04; // How much the body bobs while walking\n        this.nearRope = false;     // If the character is near but not at the rope edge\n        this.nearRopeDistance = 2.0; // Distance to be considered \"near\" the rope\n        this.poleHoldMode = 'ONE_HAND'; // ONE_HAND or TWO_HAND\n        this.lastMovementDirection = new THREE.Vector2(); // Last movement direction\n        this.playerVelocity = new THREE.Vector3(); // Current velocity\n        this.naturalArmSwing = true; // Whether to use natural arm swings (when not near rope)\n    }\n    \n    /**\n     * Load character model and animations\n     * @returns {Promise} - Promise that resolves when loading is complete\n     */\n    async load() {\n        // Create a realistic humanoid character using primitives\n        this.model = new THREE.Group();\n        \n        // Create materials\n        const skinMaterial = new THREE.MeshStandardMaterial({\n            color: 0xf5d0b0,\n            roughness: 0.7,\n            metalness: 0.1\n        });\n        \n        const clothingMaterial = new THREE.MeshStandardMaterial({\n            color: 0x2244aa,\n            roughness: 0.8,\n            metalness: 0.0\n        });\n        \n        const shoeMaterial = new THREE.MeshStandardMaterial({\n            color: 0x444444,\n            roughness: 0.9,\n            metalness: 0.1\n        });\n        \n        const poleMaterial = new THREE.MeshStandardMaterial({\n            color: 0x8B4513,\n            roughness: 0.9,\n            metalness: 0.1\n        });\n        \n        // Create body parts\n        // Head\n        const headGeometry = new THREE.SphereGeometry(0.25, 16, 16);\n        this.head = new THREE.Mesh(headGeometry, skinMaterial);\n        this.head.position.y = 0.9;\n        this.head.castShadow = true;\n        \n        // Create hair\n        const hairMaterial = new THREE.MeshStandardMaterial({\n            color: 0x3a2410,\n            roughness: 0.9,\n            metalness: 0.0\n        });\n        \n        const hairGeometry = new THREE.SphereGeometry(0.26, 16, 16, 0, Math.PI * 2, 0, Math.PI / 2);\n        const hair = new THREE.Mesh(hairGeometry, hairMaterial);\n        hair.rotation.x = Math.PI * 0.1;\n        hair.position.y = 0.02;\n        hair.position.z = -0.01;\n        this.head.add(hair);\n        \n        // Create face features\n        // Eyes\n        const eyeMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\n        const eyeGeometry = new THREE.SphereGeometry(0.035, 8, 8);\n        \n        const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n        leftEye.position.set(0.08, 0.05, 0.22);\n        this.head.add(leftEye);\n        \n        const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n        rightEye.position.set(-0.08, 0.05, 0.22);\n        this.head.add(rightEye);\n        \n        // Torso\n        const torsoGeometry = new THREE.BoxGeometry(0.5, 0.7, 0.3);\n        this.torso = new THREE.Mesh(torsoGeometry, clothingMaterial);\n        this.torso.position.y = 0.45;\n        this.torso.castShadow = true;\n        \n        // Arms\n        const armGeometry = new THREE.CylinderGeometry(0.07, 0.07, 0.5, 8);\n        \n        this.leftArm = new THREE.Group();\n        const leftArmMesh = new THREE.Mesh(armGeometry, skinMaterial);\n        leftArmMesh.position.y = -0.25;\n        this.leftArm.add(leftArmMesh);\n        this.leftArm.position.set(0.3, 0.65, 0);\n        this.leftArm.rotation.z = -0.2;\n        \n        this.rightArm = new THREE.Group();\n        const rightArmMesh = new THREE.Mesh(armGeometry, skinMaterial);\n        rightArmMesh.position.y = -0.25;\n        this.rightArm.add(rightArmMesh);\n        this.rightArm.position.set(-0.3, 0.65, 0);\n        this.rightArm.rotation.z = 0.2;\n        \n        // Hands\n        const handGeometry = new THREE.SphereGeometry(0.08, 8, 8);\n        \n        const leftHand = new THREE.Mesh(handGeometry, skinMaterial);\n        leftHand.position.y = -0.5;\n        this.leftArm.add(leftHand);\n        \n        const rightHand = new THREE.Mesh(handGeometry, skinMaterial);\n        rightHand.position.y = -0.5;\n        this.rightArm.add(rightHand);\n        \n        // Legs\n        const legGeometry = new THREE.CylinderGeometry(0.09, 0.07, 0.6, 8);\n        \n        this.leftLeg = new THREE.Group();\n        const leftLegMesh = new THREE.Mesh(legGeometry, clothingMaterial);\n        leftLegMesh.position.y = -0.3;\n        this.leftLeg.add(leftLegMesh);\n        this.leftLeg.position.set(0.15, 0.1, 0);\n        \n        this.rightLeg = new THREE.Group();\n        const rightLegMesh = new THREE.Mesh(legGeometry, clothingMaterial);\n        rightLegMesh.position.y = -0.3;\n        this.rightLeg.add(rightLegMesh);\n        this.rightLeg.position.set(-0.15, 0.1, 0);\n        \n        // Feet\n        const footGeometry = new THREE.BoxGeometry(0.12, 0.05, 0.2);\n        \n        const leftFoot = new THREE.Mesh(footGeometry, shoeMaterial);\n        leftFoot.position.set(0, -0.6, 0.05);\n        this.leftLeg.add(leftFoot);\n        \n        const rightFoot = new THREE.Mesh(footGeometry, shoeMaterial);\n        rightFoot.position.set(0, -0.6, 0.05);\n        this.rightLeg.add(rightFoot);\n        \n        // Balance pole\n        const poleGeometry = new THREE.CylinderGeometry(0.03, 0.03, 3, 8);\n        this.balancePole = new THREE.Mesh(poleGeometry, poleMaterial);\n        this.balancePole.castShadow = true;\n        \n        // Set initial pole position to one-handed carry\n        this.updatePolePosition();\n        \n        // Assemble character\n        this.model.add(this.head);\n        this.model.add(this.torso);\n        this.model.add(this.leftArm);\n        this.model.add(this.rightArm);\n        this.model.add(this.leftLeg);\n        this.model.add(this.rightLeg);\n        this.model.add(this.balancePole);\n        \n        this.model.castShadow = true;\n        \n        // Position character at start platform\n        this.updatePosition();\n        \n        this.scene.add(this.model);\n        \n        return Promise.resolve();\n    }\n    \n    /**\n     * Update pole position based on current state\n     */\n    updatePolePosition() {\n        if (!this.balancePole) return;\n        \n        if (this.poleHoldMode === 'ONE_HAND') {\n            // Hold pole in right hand, vertically\n            this.balancePole.rotation.set(0, 0, 0); // Vertical pole\n            \n            // Position it near the right hand\n            this.balancePole.position.set(-0.4, 0.4, 0.2);\n            this.balancePole.rotation.z = -Math.PI * 0.05; // Slight angle\n            \n            // Make it a bit shorter for carrying\n            this.balancePole.scale.set(0.9, 0.9, 0.9);\n        } else if (this.poleHoldMode === 'TWO_HAND') {\n            // Hold pole horizontally with both hands\n            this.balancePole.rotation.set(Math.PI / 2, 0, Math.PI / 2); // Horizontal pole\n            this.balancePole.position.set(0, 0.6, 0.1); // Center in front\n            \n            // Return to full scale\n            this.balancePole.scale.set(1, 1, 1);\n        }\n    }\n    \n    /**\n     * Update character position based on state and position\n     */\n    updatePosition() {\n        if (!this.model || !this.rope) return;\n        \n        if (this.isOnPlatform) {\n            // Position character on the platform based on platformPosition\n            if (this.environment) {\n                if (this.platformPosition.length() === 0) {\n                    // Initialize platform position if not set\n                    if (this.environment.startPlatformPosition) {\n                        const platformPos = this.environment.startPlatformPosition;\n                        const platformRadius = this.environment.platformRadius;\n                        const platformHeight = this.environment.platformHeight || 0;\n                        \n                        // Place character on the platform, adjusted from center\n                        this.platformPosition.set(\n                            platformPos.x,\n                            platformPos.y + platformHeight,\n                            platformPos.z - platformRadius * 0.6\n                        );\n                        \n                        console.log(\"Character positioned on platform at:\", this.platformPosition);\n                        \n                        // Look towards the end platform\n                        if (this.environment.endPlatformPosition) {\n                            const lookDirection = new THREE.Vector3()\n                                .copy(this.environment.endPlatformPosition)\n                                .sub(platformPos)\n                                .normalize();\n                            this.facingDirection = Math.atan2(lookDirection.x, lookDirection.z);\n                        }\n                    }\n                }\n                \n                // Position model at platform position\n                this.model.position.copy(this.platformPosition);\n                \n                // Apply body bob for realistic walking\n                if (this.state === 'WALKING') {\n                    // Bob height based on step cycle\n                    this.bodyBobHeight = Math.abs(Math.sin(this.footstepCycle)) * this.strideBobAmount;\n                } else {\n                    // Gradually reduce bob when standing still\n                    this.bodyBobHeight *= 0.8;\n                }\n                \n                // Apply vertical offset to position character directly on platform surface\n                // FURTHER REDUCED OFFSET TO ELIMINATE GAP BETWEEN FEET AND PLATFORM\n                this.model.position.y += this.height/2 - 1.0 + this.bodyBobHeight;\n                \n                // Set character rotation based on facing direction\n                this.model.rotation.y = this.facingDirection;\n                \n                // Check if near or at rope edge\n                this.checkRopeProximity();\n                \n                return;\n            }\n        }\n        \n        // If not on platform, position along the rope (existing rope logic)\n        // Calculate position along the rope\n        const curve = this.rope.geometry.parameters.path;\n        const point = curve.getPointAt(this.position);\n        \n        // Calculate rope tangent for orientation\n        const tangent = curve.getTangentAt(this.position);\n        \n        // Position character on rope\n        this.model.position.copy(point);\n        \n        // Raise character to stand on top of rope\n        // ADJUSTED TO MATCH PLATFORM HEIGHT REDUCTION\n        this.model.position.y += this.height / 2 - 1.0 + this.rope.geometry.parameters.radius;\n        \n        // Apply balance offset (lean left/right)\n        const rightVector = new THREE.Vector3(1, 0, 0);\n        this.model.position.add(\n            rightVector.multiplyScalar(this.balance * 0.3)\n        );\n        \n        // Orient character along rope\n        const lookAtPoint = new THREE.Vector3().copy(point).add(tangent);\n        this.model.lookAt(lookAtPoint);\n        \n        // Apply balance to rotation (tilt left/right)\n        this.model.rotation.z = this.balance * Math.PI / 8; // Tilt up to 22.5 degrees\n        \n        // Update animations based on character state\n        this.updateAnimations();\n    }\n    \n    /**\n     * Check if character is near or at the rope edge\n     */\n    checkRopeProximity() {\n        if (!this.environment || !this.rope) return;\n        \n        // Get rope start point\n        const ropeStartPoint = this.rope.geometry.parameters.path.getPointAt(0);\n        \n        // Distance to rope start\n        const distanceToRopeStart = this.platformPosition.distanceTo(ropeStartPoint);\n        \n        // Vector to rope\n        const toRope = new THREE.Vector3()\n            .copy(ropeStartPoint)\n            .sub(this.platformPosition)\n            .normalize();\n        \n        // Direction character is facing (as vector)\n        const facingVector = new THREE.Vector3(\n            Math.sin(this.facingDirection),\n            0,\n            Math.cos(this.facingDirection)\n        );\n        \n        // Dot product to check if facing rope\n        const dotProduct = facingVector.dot(toRope);\n        const facingRope = dotProduct > 0.5; // Reduced threshold to make facing detection more forgiving\n        const angleToDegrees = Math.acos(Math.max(-1, Math.min(1, dotProduct))) * (180 / Math.PI);\n        \n        console.log(\"Distance to rope:\", distanceToRopeStart.toFixed(2), \n                   \"Angle to rope:\", angleToDegrees.toFixed(1) + \"°\", \n                   \"Facing rope:\", facingRope);\n        \n        // Update rope proximity states\n        const prevNearRope = this.nearRope;\n        const prevOnRopeEdge = this.onRopeEdge;\n        \n        // Check if near rope (increased distance threshold significantly)\n        this.nearRope = distanceToRopeStart < this.nearRopeDistance + 1.0 && facingRope;\n        \n        // Check if at rope edge (increased threshold significantly)\n        this.onRopeEdge = distanceToRopeStart < 2.5 && facingRope;\n        \n        // DIRECT ROPE ENTRY: If very close to rope regardless of facing, force rope edge\n        if (distanceToRopeStart < 1.0) {\n            this.onRopeEdge = true;\n            console.log(\"FORCED ROPE EDGE - very close to rope\");\n        }\n        \n        // Update pole holding mode based on proximity to rope\n        if (this.onRopeEdge) {\n            if (this.poleHoldMode !== 'TWO_HAND') {\n                this.poleHoldMode = 'TWO_HAND';\n                this.updatePolePosition();\n                console.log(\"At rope edge - holding pole with two hands\");\n            }\n        } else if (this.nearRope) {\n            if (this.poleHoldMode !== 'TWO_HAND') {\n                this.poleHoldMode = 'TWO_HAND';\n                this.updatePolePosition();\n                console.log(\"Near rope - holding pole with two hands\");\n            }\n        } else {\n            if (this.poleHoldMode !== 'ONE_HAND') {\n                this.poleHoldMode = 'ONE_HAND';\n                this.updatePolePosition();\n                console.log(\"Away from rope - holding pole with one hand\");\n            }\n        }\n        \n        // Handle transition when state changes\n        if (prevNearRope !== this.nearRope || prevOnRopeEdge !== this.onRopeEdge) {\n            // Update animations for the new state\n            if (this.state === 'WALKING') {\n                this.playWalkingAnimation();\n            } else {\n                this.playIdleAnimation();\n            }\n        }\n        \n        // If W is pressed while at rope edge, transition to rope - MORE FORGIVING CONDITIONS\n        if (this.platformMovement.forward && (this.onRopeEdge || distanceToRopeStart < 2.0)) {\n            // Force transition to rope if very close or facing in right general direction\n            if (distanceToRopeStart < 2.5 && (angleToDegrees < 45 || distanceToRopeStart < 1.0)) {\n                console.log(\"Initiating transition to rope - W pressed at edge\");\n                this.transitionToRope();\n            }\n        }\n    }\n    \n    /**\n     * Play idle animation - for platform or rope\n     */\n    playIdleAnimation() {\n        if (this.isOnPlatform) {\n            // Platform idle animation\n            if (this.nearRope || this.onRopeEdge) {\n                // Near rope - ready stance\n                this.leftArm.rotation.set(0, 0, -0.3);\n                this.rightArm.rotation.set(0, 0, 0.3);\n                this.leftLeg.rotation.set(0.1, 0, 0);\n                this.rightLeg.rotation.set(0.1, 0, 0);\n                \n                // Look down at rope a bit\n                this.head.rotation.set(0.2, 0, 0);\n            } else {\n                // Regular idle stance with pole in one hand\n                this.leftArm.rotation.set(0, 0, -0.2);\n                this.rightArm.rotation.set(0.2, 0, 0.3); // Right arm holding pole\n                this.leftLeg.rotation.set(0, 0, 0);\n                this.rightLeg.rotation.set(0, 0, 0);\n                this.head.rotation.set(0, 0, 0);\n            }\n        } else {\n            // Rope idle animation - Use existing animation\n            this.leftArm.rotation.set(0, 0, -0.2);\n            this.rightArm.rotation.set(0, 0, 0.2);\n            this.leftLeg.rotation.set(0, 0, 0);\n            this.rightLeg.rotation.set(0, 0, 0);\n            this.head.rotation.set(0, 0, 0);\n            this.torso.rotation.set(0, 0, 0);\n        }\n        \n        // Update pole position based on context\n        this.updatePolePosition();\n    }\n    \n    /**\n     * Play walking animation - for platform or rope\n     */\n    playWalkingAnimation() {\n        if (this.isOnPlatform) {\n            if (this.nearRope || this.onRopeEdge) {\n                // Careful walking near rope edge\n                this.leftArm.rotation.set(0, 0, -0.3);\n                this.rightArm.rotation.set(0, 0, 0.3);\n                \n                // Shorter steps\n                this.footstepInterval = 0.6;\n            } else {\n                // Normal walking on platform\n                this.leftArm.rotation.set(0, 0, -0.2);\n                this.rightArm.rotation.set(0.2, 0, 0.3); // Adjusted for pole\n                \n                // Regular step interval\n                this.footstepInterval = 0.4;\n            }\n        } else {\n            // Rope walking animation - use existing rope walking\n            this.leftArm.rotation.set(0, 0, -0.2);\n            this.rightArm.rotation.set(0, 0, 0.2);\n        }\n        \n        // Update pole position based on context\n        this.updatePolePosition();\n    }\n    \n    /**\n     * Update character animations based on state and balance\n     */\n    updateAnimations() {\n        const stateChanged = this.prevState !== this.state;\n        const balanceChanged = Math.abs(this.prevBalance - this.balance) > 0.2;\n        \n        if (stateChanged || balanceChanged) {\n            switch (this.state) {\n                case 'IDLE':\n                    this.playIdleAnimation();\n                    break;\n                case 'WALKING':\n                    this.playWalkingAnimation();\n                    break;\n                case 'BALANCING':\n                    this.playBalancingAnimation();\n                    break;\n                case 'FALLING':\n                    this.playFallingAnimation();\n                    break;\n            }\n            \n            this.prevState = this.state;\n            this.prevBalance = this.balance;\n        }\n        \n        // Continuously update animation parameters\n        const deltaTime = this.animationClock.getDelta();\n        \n        // Update walk cycle\n        if (this.state === 'WALKING') {\n            this.walkCycle += deltaTime * this.speed * 3;\n            \n            // Move legs in walking motion\n            const legAngle = Math.sin(this.walkCycle) * 0.3;\n            this.leftLeg.rotation.x = legAngle;\n            this.rightLeg.rotation.x = -legAngle;\n            \n            // Subtle arm movement during walking\n            const armAngle = Math.sin(this.walkCycle) * 0.15;\n            this.leftArm.rotation.x = -armAngle;\n            this.rightArm.rotation.x = armAngle;\n        }\n        \n        // Update balance animations\n        if (this.state === 'WALKING' || this.state === 'BALANCING') {\n            this.balanceCycle += deltaTime * 2;\n            \n            // Adjust arms based on balance\n            const balanceAdjustment = Math.abs(this.balance) * 0.7;\n            \n            if (this.balance < -0.1) {\n                // Leaning left - raise right arm\n                this.rightArm.rotation.z = -0.8 * balanceAdjustment;\n                this.leftArm.rotation.z = -0.2;\n                \n                // Tilt pole for counterbalance\n                this.balancePole.rotation.y = -this.balance * 0.2;\n            } else if (this.balance > 0.1) {\n                // Leaning right - raise left arm\n                this.leftArm.rotation.z = 0.8 * balanceAdjustment;\n                this.rightArm.rotation.z = 0.2;\n                \n                // Tilt pole for counterbalance\n                this.balancePole.rotation.y = -this.balance * 0.2;\n            } else {\n                // Centered - normal arm position with subtle movement\n                const armSway = Math.sin(this.balanceCycle) * 0.05;\n                this.leftArm.rotation.z = -0.2 + armSway;\n                this.rightArm.rotation.z = 0.2 - armSway;\n                this.balancePole.rotation.y = armSway * 2;\n            }\n            \n            // Add subtle body sway\n            const bodySway = Math.sin(this.balanceCycle * 1.5) * 0.02;\n            this.head.rotation.z = bodySway;\n            this.torso.rotation.z = bodySway;\n        }\n    }\n    \n    /**\n     * Play balancing animation\n     */\n    playBalancingAnimation() {\n        // Arms out for balance\n        this.leftArm.rotation.set(0, 0, -0.5);\n        this.rightArm.rotation.set(0, 0, 0.5);\n        \n        // Subtle knee bend\n        this.leftLeg.rotation.x = 0.1;\n        this.rightLeg.rotation.x = 0.1;\n    }\n    \n    /**\n     * Play falling animation\n     */\n    playFallingAnimation() {\n        // Arms flailing\n        const fallRotation = Math.sign(this.balance) * Math.PI / 2;\n        this.leftArm.rotation.set(0.5, 0, -0.8);\n        this.rightArm.rotation.set(0.5, 0, 0.8);\n        \n        // Legs kicking\n        this.leftLeg.rotation.set(0.5, 0, 0);\n        this.rightLeg.rotation.set(-0.3, 0, 0);\n        \n        // Panic expression - head tilted back\n        this.head.rotation.set(0.3, 0, 0);\n    }\n    \n    /**\n     * Start moving the character forward (called on key down)\n     */\n    moveForward() {\n        console.log(\"moveForward called, isOnPlatform:\", this.isOnPlatform);\n        \n        if (this.isOnPlatform) {\n            // Platform movement\n            this.platformMovement.forward = true;\n            this.state = 'WALKING';\n            console.log(\"Platform walking forward activated\");\n        } else {\n            // Rope movement\n            this.isMovingForward = true;\n        }\n    }\n    \n    /**\n     * Stop moving the character forward (called on key up)\n     */\n    stopMoving() {\n        if (this.isOnPlatform) {\n            // Platform movement\n            this.platformMovement.forward = false;\n            \n            // If no movement keys are pressed, go to idle\n            if (!this.isAnyMovementKeyPressed()) {\n                this.state = 'IDLE';\n            }\n        } else {\n            // Rope movement\n            this.isMovingForward = false;\n            \n            // If not taking a step, immediately go to balancing state\n            if (!this.takingStep) {\n                this.state = 'BALANCING';\n            }\n        }\n    }\n    \n    /**\n     * Move backward (S key pressed)\n     */\n    moveBackward() {\n        console.log(\"moveBackward called, isOnPlatform:\", this.isOnPlatform);\n        \n        if (this.isOnPlatform) {\n            this.platformMovement.backward = true;\n            this.state = 'WALKING';\n            console.log(\"Platform walking backward activated\");\n        }\n        // No backward movement on rope\n    }\n    \n    /**\n     * Stop moving backward (S key released)\n     */\n    stopMovingBackward() {\n        if (this.isOnPlatform) {\n            this.platformMovement.backward = false;\n            \n            // If no movement keys are pressed, go to idle\n            if (!this.isAnyMovementKeyPressed()) {\n                this.state = 'IDLE';\n            }\n        }\n    }\n    \n    /**\n     * Move left (A key pressed)\n     */\n    moveLeft() {\n        console.log(\"moveLeft called, isOnPlatform:\", this.isOnPlatform);\n        \n        if (this.isOnPlatform) {\n            this.platformMovement.left = true;\n            this.state = 'WALKING';\n            console.log(\"Platform walking left activated\");\n        } else {\n            // On rope, adjust balance\n            this.adjustBalance(-1);\n        }\n    }\n    \n    /**\n     * Stop moving left (A key released)\n     */\n    stopMovingLeft() {\n        if (this.isOnPlatform) {\n            this.platformMovement.left = false;\n            \n            // If no movement keys are pressed, go to idle\n            if (!this.isAnyMovementKeyPressed()) {\n                this.state = 'IDLE';\n            }\n        } else {\n            // On rope, stop balance adjustment\n            this.adjustBalance(0);\n        }\n    }\n    \n    /**\n     * Move right (D key pressed)\n     */\n    moveRight() {\n        console.log(\"moveRight called, isOnPlatform:\", this.isOnPlatform);\n        \n        if (this.isOnPlatform) {\n            this.platformMovement.right = true;\n            this.state = 'WALKING';\n            console.log(\"Platform walking right activated\");\n        } else {\n            // On rope, adjust balance\n            this.adjustBalance(1);\n        }\n    }\n    \n    /**\n     * Stop moving right (D key released)\n     */\n    stopMovingRight() {\n        if (this.isOnPlatform) {\n            this.platformMovement.right = false;\n            \n            // If no movement keys are pressed, go to idle\n            if (!this.isAnyMovementKeyPressed()) {\n                this.state = 'IDLE';\n            }\n        } else {\n            // On rope, stop balance adjustment\n            this.adjustBalance(0);\n        }\n    }\n    \n    /**\n     * Check if any movement key is currently pressed\n     * @returns {boolean} True if any movement key is pressed\n     */\n    isAnyMovementKeyPressed() {\n        return this.platformMovement.forward ||\n               this.platformMovement.backward ||\n               this.platformMovement.left ||\n               this.platformMovement.right;\n    }\n    \n    /**\n     * Adjust character balance\n     * @param {number} direction - Direction to lean (-1 for left, 1 for right)\n     */\n    adjustBalance(direction) {\n        // Only apply balance force if on the rope\n        if (!this.isOnPlatform) {\n            this.balanceForce = direction;\n            \n            // Immediately update arm positions for responsive feel\n            if (direction < 0) {\n                // Leaning left - raise right arm\n                const intensity = Math.abs(direction) * 0.7;\n                this.rightArm.rotation.z = -0.8 * intensity;\n                this.balancePole.rotation.y = 0.3 * intensity;\n            } else if (direction > 0) {\n                // Leaning right - raise left arm\n                const intensity = Math.abs(direction) * 0.7;\n                this.leftArm.rotation.z = 0.8 * intensity;\n                this.balancePole.rotation.y = -0.3 * intensity;\n            }\n        }\n    }\n    \n    /**\n     * Set the current wind effect on the character\n     * @param {number} windForce - Force of wind (-1 to 1)\n     */\n    setWindEffect(windForce) {\n        this.windEffect = windForce;\n    }\n    \n    /**\n     * Reset character position to start of rope\n     */\n    resetPosition() {\n        this.position = 0;\n        this.balance = 0;\n        this.speed = 0;\n        this.state = 'IDLE';\n        this.balanceForce = 0;\n        this.isOnPlatform = true;\n        this.isMovingForward = false;\n        this.windEffect = 0;\n        \n        // Reset platform movement flags\n        this.platformMovement.forward = false;\n        this.platformMovement.backward = false;\n        this.platformMovement.left = false;\n        this.platformMovement.right = false;\n        \n        // Reset platform position to ensure we start at the right place\n        this.platformPosition = new THREE.Vector3();\n        \n        // Reset pole to one hand for platform movement\n        this.poleHoldMode = 'ONE_HAND';\n        this.updatePolePosition();\n        \n        this.updatePosition();\n    }\n    \n    /**\n     * Update character state and position\n     * @param {number} deltaTime - Time since last update in seconds\n     */\n    update(deltaTime) {\n        // Handle platform movement if on platform\n        if (this.isOnPlatform) {\n            this.updatePlatformMovement(deltaTime);\n            this.updatePosition();\n            return;\n        }\n        \n        // Handle step-based movement\n        if (this.takingStep) {\n            // Update step timer\n            this.stepTimer += deltaTime;\n            \n            // Calculate progress (0 to 1)\n            const stepProgress = Math.min(1, this.stepTimer / this.stepTime);\n            \n            // Use easing for smoother step motion\n            const easedProgress = this.easeInOutQuad(stepProgress);\n            \n            // Update position along rope\n            this.position = this.stepStartPosition + \n                            (this.stepTargetPosition - this.stepStartPosition) * easedProgress;\n            \n            // Check if step is complete\n            if (stepProgress >= 1) {\n                this.takingStep = false;\n                \n                // If still holding forward key, immediately start next step\n                if (this.isMovingForward && this.position < 0.98) {\n                    this.startNewStep();\n                } else {\n                    this.state = 'BALANCING'; // Return to balancing after step\n                }\n                \n                // Apply additional balance disturbance at the end of a step\n                if (this.totalStepsTaken > 10) {\n                    // After 10 steps, add an extra wobble at the end\n                    const endStepWobble = 0.03 * this.balanceDifficulty;\n                    this.balance += (Math.random() - 0.5) * endStepWobble;\n                }\n            }\n        } else {\n            // Check if we should start a new step (when W is held down)\n            if (this.isMovingForward && this.position < 0.98) {\n                this.startNewStep();\n            }\n            \n            // NOT stepping - help regain balance\n            if (Math.abs(this.balance) > 0.1) {\n                // Apply recovery force in opposite direction of current balance\n                const recoveryForce = -Math.sign(this.balance) * \n                                     this.balanceRecoveryRate * deltaTime;\n                this.balance += recoveryForce;\n            }\n            \n            // Gradually reduce balance difficulty when standing still for a while\n            if (!this.takingStep && this.stepTimer > 2.0) {\n                this.balanceDifficulty = Math.max(1, this.balanceDifficulty - deltaTime * 0.3);\n            }\n            \n            // Update state based on whether balancing or idle\n            if (Math.abs(this.balance) > 0.3) {\n                this.state = 'BALANCING';\n            } else {\n                this.state = 'IDLE';\n            }\n        }\n        \n        // Add periodic balance noise for more realistic balancing challenge\n        this.balanceNoiseTimer += deltaTime;\n        if (this.balanceNoiseTimer >= this.balanceNoiseInterval) {\n            this.balanceNoiseTimer = 0;\n            \n            // Apply random disturbance (affected by wind and difficulty)\n            const randomNoise = (Math.random() - 0.5) * \n                              this.balanceNoiseMagnitude * this.balanceDifficulty;\n            \n            // Wind increases noise and biases it in the wind direction\n            const windNoise = this.windEffect * \n                            this.balanceNoiseMagnitude * 0.4 * this.balanceDifficulty;\n            \n            this.balance += randomNoise + windNoise;\n        }\n        \n        // Apply player's balance force (inversely proportional to difficulty)\n        this.balance += (this.balanceForce * deltaTime * 2) / (Math.sqrt(this.balanceDifficulty) * 0.6);\n        \n        // Apply direct wind effect on balance\n        this.balance += this.windEffect * deltaTime * 0.3 * this.balanceDifficulty;\n        \n        // Ensure balance stays within range [-1, 1]\n        this.balance = Math.max(-1, Math.min(1, this.balance));\n        \n        // Update character state based on balance\n        this.updateState();\n        \n        // Update position visually\n        this.updatePosition();\n        \n        // Step timer for balance recovery\n        if (!this.takingStep) {\n            this.stepTimer += deltaTime;\n        }\n        \n        // Check if reached the end platform\n        if (this.position >= 0.98) {\n            this.transitionToEndPlatform();\n        }\n    }\n    \n    /**\n     * Easing function for smoother step movement\n     * @param {number} t - Progress from 0 to 1\n     * @returns {number} - Eased value from 0 to 1\n     */\n    easeInOutQuad(t) {\n        return t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2;\n    }\n    \n    /**\n     * Update character state based on balance and speed\n     */\n    updateState() {\n        // Only change state if not on platform\n        if (this.isOnPlatform) return;\n        \n        // Already falling\n        if (this.state === 'FALLING') return;\n        \n        // Taking a step overrides other states\n        if (this.takingStep) {\n            this.state = 'WALKING';\n            return;\n        }\n        \n        // Determine state based on balance\n        const absBalance = Math.abs(this.balance);\n        \n        if (absBalance > 0.9) {\n            // Too much imbalance, fall off\n            this.state = 'FALLING';\n        } else if (absBalance > 0.5) {\n            // Not moving but struggling with balance\n            this.state = 'BALANCING';\n        } else {\n            // Standing still with good balance\n            this.state = 'IDLE';\n        }\n    }\n    \n    /**\n     * Start a new step forward\n     * Helper method to encapsulate step initialization logic\n     */\n    startNewStep() {\n        this.takingStep = true;\n        this.stepTimer = 0;\n        this.stepStartPosition = this.position;\n        this.stepTargetPosition = Math.min(1, this.position + this.stepDistance);\n        \n        // Set walking state immediately\n        this.state = 'WALKING';\n        \n        // Apply balance disturbance for this step\n        const stepDisturbance = this.movementBalanceEffect * this.balanceDifficulty;\n        const randomDirection = (Math.random() - 0.5 + this.windEffect * 0.2);\n        this.balance += stepDisturbance * randomDirection;\n        \n        // Increase total steps count\n        this.totalStepsTaken++;\n        \n        // Increase difficulty based on total steps taken\n        if (this.totalStepsTaken > 5) {\n            // Every 5 steps makes it harder\n            const targetDifficulty = 1 + Math.min(this.maxBalanceDifficulty - 1, \n                (this.totalStepsTaken / 20) * (this.maxBalanceDifficulty - 1));\n            \n            this.balanceDifficulty = Math.min(this.balanceDifficulty + 0.2, targetDifficulty);\n        }\n    }\n    \n    /**\n     * Update movement on platform\n     * @param {number} deltaTime - Time since last update\n     */\n    updatePlatformMovement(deltaTime) {\n        if (!this.isOnPlatform) return;\n        \n        // For debugging: log movement flags\n        console.log(\"Platform movement flags:\", \n            \"W:\", this.platformMovement.forward, \n            \"S:\", this.platformMovement.backward, \n            \"A:\", this.platformMovement.left, \n            \"D:\", this.platformMovement.right,\n            \"Q:\", this.platformMovement.rotateLeft,\n            \"E:\", this.platformMovement.rotateRight);\n        \n        // Handle rotation first (Q and E keys)\n        if (this.platformMovement.rotateLeft) {\n            // Rotate counterclockwise\n            this.facingDirection += this.platformRotationSpeed * deltaTime;\n            \n            // Update character rotation\n            this.model.rotation.y = this.facingDirection;\n        }\n        \n        if (this.platformMovement.rotateRight) {\n            // Rotate clockwise\n            this.facingDirection -= this.platformRotationSpeed * deltaTime;\n            \n            // Update character rotation\n            this.model.rotation.y = this.facingDirection;\n        }\n        \n        // Calculate movement direction based on keys pressed\n        let moveX = 0;\n        let moveZ = 0;\n        \n        // Forward/backward in the direction character is facing\n        if (this.platformMovement.forward) {\n            moveZ += Math.cos(this.facingDirection);\n            moveX += Math.sin(this.facingDirection);\n        }\n        if (this.platformMovement.backward) {\n            moveZ -= Math.cos(this.facingDirection);\n            moveX -= Math.sin(this.facingDirection);\n        }\n        \n        // Left/right perpendicular to facing direction\n        if (this.platformMovement.left) {\n            moveZ -= Math.sin(this.facingDirection);\n            moveX += Math.cos(this.facingDirection);\n        }\n        if (this.platformMovement.right) {\n            moveZ += Math.sin(this.facingDirection);\n            moveX -= Math.cos(this.facingDirection);\n        }\n        \n        // Store movement direction for animation\n        if (moveX !== 0 || moveZ !== 0) {\n            this.lastMovementDirection.set(moveX, moveZ).normalize();\n        }\n        \n        // Calculate current speed\n        const isMoving = moveX !== 0 || moveZ !== 0;\n        const isRotating = this.platformMovement.rotateLeft || this.platformMovement.rotateRight;\n        \n        // Apply movement and animations\n        if (isMoving) {\n            // Normalize movement vector if moving diagonally\n            const length = Math.sqrt(moveX * moveX + moveZ * moveZ);\n            moveX /= length;\n            moveZ /= length;\n            \n            // Walking speed varies based on proximity to rope\n            let currentSpeed = this.platformSpeed;\n            if (this.nearRope) {\n                currentSpeed *= 0.6; // Slow down near rope\n            } else if (this.onRopeEdge) {\n                currentSpeed *= 0.4; // Even slower at rope edge\n            }\n            \n            // Apply movement speed\n            moveX *= currentSpeed * deltaTime;\n            moveZ *= currentSpeed * deltaTime;\n            \n            // Track velocity for animation smoothing\n            this.playerVelocity.set(moveX / deltaTime, 0, moveZ / deltaTime);\n            \n            // Update position - apply movement regardless of keys pressed\n            this.platformPosition.x += moveX;\n            this.platformPosition.z += moveZ;\n            console.log(\"Platform position updated:\", this.platformPosition.x.toFixed(2), this.platformPosition.z.toFixed(2));\n            \n            // Keep character on platform\n            this.constrainToPlatform();\n            \n            // Update animation state\n            if (this.state !== 'WALKING') {\n                this.state = 'WALKING';\n                this.playWalkingAnimation();\n            }\n            \n            // Update footstep cycle\n            this.footstepCycle += deltaTime * currentSpeed * 5;\n            \n            // Check for footstep sounds/effects\n            this.lastFootstep += deltaTime;\n            if (this.lastFootstep >= this.footstepInterval) {\n                this.lastFootstep = 0;\n                this.createFootstepEffect();\n            }\n            \n            // Update walking animations\n            this.updateWalkingAnimations(deltaTime);\n            \n        } else if (isRotating) {\n            // Player is rotating in place\n            if (this.state !== 'WALKING') {\n                // Use walking animation when rotating in place \n                this.state = 'WALKING';\n                this.playWalkingAnimation();\n            }\n            \n            // Slower animation for rotation-only\n            this.footstepCycle += deltaTime * this.platformRotationSpeed * 2;\n            \n            // Update walking animations with slower pace\n            this.updateWalkingAnimations(deltaTime);\n        } else {\n            // Slowing down - not moving or rotating\n            this.playerVelocity.multiplyScalar(0.9);\n            \n            // Reset footstep timer when stopped\n            this.lastFootstep = this.footstepInterval;\n            \n            // Change state to idle if previously walking\n            if (this.state === 'WALKING') {\n                this.state = 'IDLE';\n                this.playIdleAnimation();\n            }\n        }\n    }\n    \n    /**\n     * Create footstep effect (visual or sound)\n     * In a full implementation, this would play a sound and maybe create a dust particle\n     */\n    createFootstepEffect() {\n        // Left or right foot based on cycle\n        const isLeftFoot = Math.sin(this.footstepCycle) > 0;\n        \n        // In a full implementation, this is where you would:\n        // 1. Play footstep sound\n        // 2. Create footstep particle effect\n        console.log(`Footstep: ${isLeftFoot ? 'Left' : 'Right'} foot${this.nearRope ? ' (careful)' : ''}`);\n    }\n    \n    /**\n     * Update walking animations\n     * @param {number} deltaTime - Time since last update\n     */\n    updateWalkingAnimations(deltaTime) {\n        // Determine movement speed for animation pacing\n        const speed = this.playerVelocity.length();\n        \n        // Leg movements\n        const legAngle = Math.sin(this.footstepCycle) * 0.4; // Increased range for more natural walking\n        this.leftLeg.rotation.x = legAngle;\n        this.rightLeg.rotation.x = -legAngle;\n        \n        // Arm swing animations\n        if (this.nearRope || this.onRopeEdge || !this.naturalArmSwing) {\n            // Near rope - arms prepared for balance\n            this.leftArm.rotation.x = 0;\n            this.rightArm.rotation.x = 0;\n        } else {\n            // Natural arm swings while walking\n            // Arms swing opposite to legs\n            const armAngle = -Math.sin(this.footstepCycle) * 0.3;\n            this.leftArm.rotation.x = armAngle;\n            \n            // Right arm has reduced swing because it's holding the pole\n            this.rightArm.rotation.x = armAngle * 0.3;\n        }\n        \n        // Torso twist for natural walking\n        this.torso.rotation.y = Math.sin(this.footstepCycle) * 0.05;\n        \n        // Head looks slightly in the direction of movement\n        if (!this.nearRope && !this.onRopeEdge) {\n            this.head.rotation.y = Math.sin(this.footstepCycle * 0.5) * 0.05;\n        }\n        \n        // Special animations for strafing (A/D without W/S)\n        const isStrafing = (this.platformMovement.left || this.platformMovement.right) && \n                         !(this.platformMovement.forward || this.platformMovement.backward);\n                         \n        if (isStrafing && this.isOnPlatform) {\n            // Tilt body into the strafe\n            if (this.platformMovement.left) {\n                this.torso.rotation.z = Math.max(-0.15, this.torso.rotation.z - 0.02);\n            } else if (this.platformMovement.right) {\n                this.torso.rotation.z = Math.min(0.15, this.torso.rotation.z + 0.02);\n            }\n        } else {\n            // Return to upright gradually\n            this.torso.rotation.z *= 0.9;\n        }\n    }\n    \n    /**\n     * Transition from platform to rope with appropriate animation\n     */\n    transitionToRope() {\n        console.log(\"Transitioning to rope...\");\n        \n        // Play transition animation (could be expanded)\n        this.poleHoldMode = 'TWO_HAND';\n        this.updatePolePosition();\n        \n        // Switch to rope walking\n        this.isOnPlatform = false;\n        this.position = 0; // Start at beginning of rope\n        this.balance = 0;  // Reset balance\n        this.state = 'WALKING';\n        \n        // Reset platform movement flags\n        this.platformMovement.forward = false;\n        this.platformMovement.backward = false;\n        this.platformMovement.left = false;\n        this.platformMovement.right = false;\n        this.platformMovement.rotateLeft = false;\n        this.platformMovement.rotateRight = false;\n        \n        // Start moving forward on rope if W is still pressed\n        this.isMovingForward = true; // Start moving forward immediately\n        \n        // Start a step right away for immediate feedback\n        this.startNewStep();\n        \n        // Reset animation parameters\n        this.footstepCycle = 0;\n        this.lastFootstep = 0;\n        this.bodyBobHeight = 0;\n        \n        // Update position to align with rope start\n        this.updatePosition();\n        \n        console.log(\"Transition complete. isOnPlatform:\", this.isOnPlatform, \"isMovingForward:\", this.isMovingForward);\n    }\n    \n    /**\n     * Transition to end platform when reaching end of rope\n     */\n    transitionToEndPlatform() {\n        this.isOnPlatform = true;\n        \n        // Position on end platform\n        if (this.environment && this.environment.endPlatformPosition) {\n            const platformPos = this.environment.endPlatformPosition;\n            const platformRadius = this.environment.platformRadius;\n            \n            // Position at edge of platform near rope\n            this.platformPosition.copy(platformPos);\n            \n            // Offset slightly from edge\n            const curve = this.rope.geometry.parameters.path;\n            const ropeEndPoint = curve.getPointAt(1);\n            const dirToCenter = new THREE.Vector3()\n                .copy(platformPos)\n                .sub(ropeEndPoint)\n                .normalize();\n            \n            this.platformPosition.add(dirToCenter.multiplyScalar(this.width));\n            \n            // Set facing direction toward center of platform\n            this.facingDirection = Math.atan2(dirToCenter.x, dirToCenter.z);\n        }\n        \n        // Reset rope properties\n        this.position = 1;\n        this.balance = 0;\n        this.state = 'IDLE';\n        this.balanceForce = 0;\n        this.isMovingForward = false;\n        this.takingStep = false;\n        this.totalStepsTaken = 0;\n        this.balanceDifficulty = 1;\n        \n        this.playIdleAnimation();\n    }\n    \n    /**\n     * Constrain character movement to platform boundaries\n     * With a wider opening at the rope connection point\n     */\n    constrainToPlatform() {\n        if (!this.environment) return;\n        \n        // Current platform\n        let platformPos, platformRadius;\n        \n        if (this.environment.startPlatformPosition && this.platformPosition.distanceTo(this.environment.startPlatformPosition) < \n            this.platformPosition.distanceTo(this.environment.endPlatformPosition || new THREE.Vector3(0, 0, 0))) {\n            // On start platform\n            platformPos = this.environment.startPlatformPosition;\n            platformRadius = this.environment.platformRadius;\n        } else if (this.environment.endPlatformPosition) {\n            // On end platform\n            platformPos = this.environment.endPlatformPosition;\n            platformRadius = this.environment.platformRadius;\n        } else {\n            return;\n        }\n        \n        // Calculate distance from platform center (XZ plane only)\n        const dx = this.platformPosition.x - platformPos.x;\n        const dz = this.platformPosition.z - platformPos.z;\n        const distanceFromCenter = Math.sqrt(dx * dx + dz * dz);\n        \n        // Get the rope start point\n        const ropeStartPoint = this.rope.geometry.parameters.path.getPointAt(0);\n        \n        // Distance to rope\n        const distanceToRope = this.platformPosition.distanceTo(ropeStartPoint);\n        \n        // If very close to the rope, allow movement regardless of platform boundaries\n        if (distanceToRope < 1.5) {\n            console.log(\"Close to rope - allowing unrestricted movement\");\n            \n            // If W is pressed and very close to rope, attempt transition\n            if (this.platformMovement.forward && distanceToRope < 1.0) {\n                console.log(\"FORCING rope transition from constrainToPlatform\");\n                this.transitionToRope();\n            }\n            \n            return; // Skip platform edge constraints\n        }\n        \n        // If beyond platform edge, constrain\n        if (distanceFromCenter > platformRadius - this.width/2) {\n            // Calculate normalized direction from center\n            const dirX = dx / distanceFromCenter;\n            const dirZ = dz / distanceFromCenter;\n            \n            // Direction from platform center to rope\n            const ropeDir = new THREE.Vector3()\n                .subVectors(ropeStartPoint, platformPos)\n                .normalize();\n                \n            // Calculate angle between character's direction and rope direction\n            // Use dot product to find cosine of angle, then convert to degrees\n            const dotProduct = dirX * ropeDir.x + dirZ * ropeDir.z;\n            const angleCos = Math.max(-1, Math.min(1, dotProduct)); // Clamp to prevent floating point errors\n            const angleRadians = Math.acos(angleCos);\n            const angleDegrees = angleRadians * (180 / Math.PI);\n            \n            // If within the 30-degree opening near the rope, allow movement off platform\n            // (15 degrees on either side of the rope direction - much wider than before)\n            const isInRopeOpening = angleDegrees < 15; // Increased from 5 to 15 degrees\n            \n            // If character is trying to go beyond platform but not at rope opening, constrain\n            if (!isInRopeOpening) {\n                // Set position to edge of platform\n                const newRadius = platformRadius - this.width/2;\n                this.platformPosition.x = platformPos.x + dirX * newRadius;\n                this.platformPosition.z = platformPos.z + dirZ * newRadius;\n                \n                console.log(\"Constrained to platform edge, angle to rope:\", angleDegrees.toFixed(1) + \"°\");\n            } else {\n                // Character is in the rope opening\n                console.log(\"Character in rope opening, angle to rope:\", angleDegrees.toFixed(1) + \"°\");\n                \n                // If moving toward rope while in the opening, check if we should transition\n                if (this.platformMovement.forward) {\n                    // Vector of current movement\n                    const moveVec = new THREE.Vector3(\n                        Math.sin(this.facingDirection), \n                        0, \n                        Math.cos(this.facingDirection)\n                    );\n                    \n                    // Check if moving generally toward rope\n                    const movingTowardRope = moveVec.dot(ropeDir) > 0.3;\n                    \n                    if (movingTowardRope && distanceToRope < 3.0) {\n                        console.log(\"Moving toward rope in platform opening - initiating transition\");\n                        this.transitionToRope();\n                    }\n                }\n            }\n        }\n    }\n    \n    /**\n     * Rotate the character to the left (Q key pressed)\n     */\n    rotateLeft() {\n        console.log(\"rotateLeft called, isOnPlatform:\", this.isOnPlatform);\n        \n        if (this.isOnPlatform) {\n            this.platformMovement.rotateLeft = true;\n        }\n    }\n    \n    /**\n     * Stop rotating left (Q key released)\n     */\n    stopRotatingLeft() {\n        if (this.isOnPlatform) {\n            this.platformMovement.rotateLeft = false;\n        }\n    }\n    \n    /**\n     * Rotate the character to the right (E key pressed)\n     */\n    rotateRight() {\n        console.log(\"rotateRight called, isOnPlatform:\", this.isOnPlatform);\n        \n        if (this.isOnPlatform) {\n            this.platformMovement.rotateRight = true;\n        }\n    }\n    \n    /**\n     * Stop rotating right (E key released)\n     */\n    stopRotatingRight() {\n        if (this.isOnPlatform) {\n            this.platformMovement.rotateRight = false;\n        }\n    }\n}\n\nexport { Character }; ","/**\n * Physics.js\n * Handles balance mechanics, forces, and collision detection\n * Implements a simple physics system for the tightrope walker\n */\n\nclass Physics {\n    /**\n     * Initialize the physics system\n     */\n    constructor() {\n        // Physics constants\n        this.gravity = 9.8;\n        this.windForce = 0;\n        this.windDirection = 0; // -1 (left) to 1 (right)\n        this.balanceThreshold = 0.8; // Character falls if balance exceeds this\n        this.balanceRecoveryRate = 0.1; // Natural balance recovery rate\n        this.windChangeFrequency = 3; // Seconds between wind changes\n        this.maxWindForce = 0.5; // Maximum wind force\n        \n        // Wind timer\n        this.windTimer = 0;\n    }\n    \n    /**\n     * Apply physics forces to the character\n     * @param {Character} character - The character to apply forces to\n     * @param {number} deltaTime - Time since last update in seconds\n     */\n    applyForces(character, deltaTime) {\n        // Update wind\n        this.updateWind(deltaTime);\n        \n        // Calculate forces based on character state\n        if (character.state === 'WALKING' || character.state === 'BALANCING') {\n            // Apply wind force to balance\n            character.balance += this.windForce * this.windDirection * deltaTime;\n            \n            // Apply movement penalty to balance (faster movement = harder to balance)\n            character.balance += character.speed * (character.balance > 0 ? 0.1 : -0.1) * deltaTime;\n            \n            // Natural balance recovery (tends toward 0)\n            if (character.balance > 0) {\n                character.balance -= this.balanceRecoveryRate * deltaTime;\n            } else if (character.balance < 0) {\n                character.balance += this.balanceRecoveryRate * deltaTime;\n            }\n            \n            // Ensure balance stays within range [-1, 1]\n            character.balance = Math.max(-1, Math.min(1, character.balance));\n        }\n    }\n    \n    /**\n     * Update wind effects\n     * @param {number} deltaTime - Time since last update in seconds\n     */\n    updateWind(deltaTime) {\n        // Update wind timer\n        this.windTimer += deltaTime;\n        \n        // Change wind randomly\n        if (this.windTimer >= this.windChangeFrequency) {\n            this.generateRandomWind();\n            this.windTimer = 0;\n        }\n    }\n    \n    /**\n     * Generate random wind effects\n     */\n    generateRandomWind() {\n        // Random wind direction (-1 to 1)\n        this.windDirection = Math.random() * 2 - 1;\n        \n        // Random wind force (0 to maxWindForce)\n        this.windForce = Math.random() * this.maxWindForce;\n    }\n    \n    /**\n     * Check if character is balanced\n     * @param {Character} character - The character to check\n     * @returns {boolean} - Whether the character is balanced\n     */\n    checkBalance(character) {\n        // If balance exceeds threshold, character falls\n        if (Math.abs(character.balance) > this.balanceThreshold) {\n            character.state = 'FALLING';\n            return false;\n        }\n        \n        return true;\n    }\n    \n    /**\n     * Increase difficulty over time\n     * @param {number} progressFactor - Factor between 0 and 1 representing progress\n     */\n    increaseDifficulty(progressFactor) {\n        // Increase max wind force based on progress\n        this.maxWindForce = 0.5 + (progressFactor * 0.5);\n        \n        // Decrease balance recovery rate based on progress\n        this.balanceRecoveryRate = 0.1 * (1 - progressFactor * 0.5);\n    }\n}\n\nexport { Physics }; ","/**\n * UIManager.js\n * Manages UI elements, screens, and user interactions\n * Handles UI transitions between different game states\n * Enhanced with realistic mountain-themed UI elements\n */\n\nclass UIManager {\n    /**\n     * Initialize the UI manager\n     * @param {Game} game - Reference to the main game object\n     */\n    constructor(game) {\n        this.game = game;\n        \n        // Get UI elements\n        this.startScreen = document.getElementById('start-screen');\n        this.gameplayUI = document.getElementById('gameplay-ui');\n        this.endScreen = document.getElementById('end-screen');\n        \n        this.playButton = document.getElementById('play-button');\n        this.tryAgainButton = document.getElementById('try-again-button');\n        this.endMessage = document.getElementById('end-message');\n        this.performanceMetrics = document.getElementById('performance-metrics');\n        \n        this.balanceIndicator = document.getElementById('balance-indicator');\n        this.balanceMarker = document.getElementById('balance-marker');\n        this.windDirectionElement = document.getElementById('wind-direction');\n        this.progressBar = document.getElementById('progress-bar');\n        \n        // Create notification container if it doesn't exist\n        this.createNotificationContainer();\n        \n        // Notification timer\n        this.notificationTimeout = null;\n        \n        // Initialize UI\n        this.setupEventListeners();\n        \n        // Subscribe to game state changes\n        this.game.gameState.addStateChangeListener(this.onGameStateChange.bind(this));\n    }\n    \n    /**\n     * Create the notification container for displaying messages\n     */\n    createNotificationContainer() {\n        let notificationContainer = document.getElementById('notification-container');\n        \n        if (!notificationContainer) {\n            // Create notification container element\n            notificationContainer = document.createElement('div');\n            notificationContainer.id = 'notification-container';\n            notificationContainer.className = 'notification-container';\n            \n            // Create notification element\n            const notification = document.createElement('div');\n            notification.id = 'notification';\n            notification.className = 'notification';\n            \n            // Add to DOM\n            notificationContainer.appendChild(notification);\n            document.body.appendChild(notificationContainer);\n            \n            // Add CSS for notifications\n            this.addNotificationStyles();\n        }\n        \n        this.notificationContainer = notificationContainer;\n        this.notification = document.getElementById('notification');\n    }\n    \n    /**\n     * Add CSS styles for notifications\n     */\n    addNotificationStyles() {\n        const style = document.createElement('style');\n        style.textContent = `\n            .notification-container {\n                position: absolute;\n                top: 20px;\n                right: 20px;\n                z-index: 1000;\n                pointer-events: none;\n            }\n            \n            .notification {\n                background-color: rgba(0, 0, 0, 0.7);\n                color: white;\n                padding: 10px 20px;\n                border-radius: 20px;\n                font-size: 1.1rem;\n                font-weight: 600;\n                text-align: center;\n                opacity: 0;\n                transform: translateY(-20px);\n                transition: opacity 0.3s ease, transform 0.3s ease;\n                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n                border: 1px solid rgba(255, 255, 255, 0.1);\n                backdrop-filter: blur(3px);\n                max-width: 300px;\n            }\n            \n            .notification.visible {\n                opacity: 1;\n                transform: translateY(0);\n            }\n            \n            .controls-panel {\n                position: absolute;\n                top: 20px;\n                right: 20px;\n                background-color: rgba(0, 0, 0, 0.7);\n                color: white;\n                padding: 15px;\n                border-radius: 10px;\n                font-size: 0.9rem;\n                z-index: 999;\n                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n                border: 1px solid rgba(255, 255, 255, 0.1);\n                backdrop-filter: blur(3px);\n                transition: opacity 0.3s ease;\n                opacity: 0;\n            }\n            \n            .controls-panel.visible {\n                opacity: 1;\n            }\n            \n            .controls-panel h3 {\n                margin: 0 0 10px 0;\n                font-size: 1rem;\n                text-align: center;\n                border-bottom: 1px solid rgba(255, 255, 255, 0.3);\n                padding-bottom: 5px;\n            }\n            \n            .controls-panel table {\n                width: 100%;\n                border-collapse: collapse;\n            }\n            \n            .controls-panel td {\n                padding: 3px 5px;\n            }\n            \n            .controls-panel .key {\n                display: inline-block;\n                background-color: rgba(255, 255, 255, 0.2);\n                border-radius: 4px;\n                padding: 2px 6px;\n                margin: 2px;\n                font-weight: bold;\n                text-align: center;\n                min-width: 20px;\n            }\n        `;\n        document.head.appendChild(style);\n    }\n    \n    /**\n     * Show a notification message\n     * @param {string} message - Message to display\n     * @param {number} duration - Duration in milliseconds\n     */\n    showNotification(message, duration = 3000) {\n        // Clear any existing timeout\n        if (this.notificationTimeout) {\n            clearTimeout(this.notificationTimeout);\n        }\n        \n        // Set notification text\n        this.notification.textContent = message;\n        \n        // Make notification visible\n        this.notification.classList.add('visible');\n        \n        // Set timeout to hide notification\n        this.notificationTimeout = setTimeout(() => {\n            this.notification.classList.remove('visible');\n        }, duration);\n    }\n    \n    /**\n     * Set up event listeners for UI elements\n     */\n    setupEventListeners() {\n        // Start button click\n        this.playButton.addEventListener('click', () => {\n            this.game.gameState.changeState('GAMEPLAY');\n            this.hideStartScreen();\n            this.showGameplayUI();\n            this.game.cameraController.animateToGameplayPosition();\n        });\n        \n        // Try again button click\n        this.tryAgainButton.addEventListener('click', () => {\n            this.game.gameState.changeState('START_SCREEN');\n            this.hideEndScreen();\n            this.hideGameplayUI();\n            this.showStartScreen();\n            \n            // Reset game\n            this.game.character.resetPosition();\n            this.game.cameraController.animateToStartPosition();\n        });\n    }\n    \n    /**\n     * Handler for game state changes\n     * @param {string} newState - The new game state\n     * @param {string} previousState - The previous game state\n     */\n    onGameStateChange(newState, previousState) {\n        switch (newState) {\n            case 'START_SCREEN':\n                this.showStartScreen();\n                this.hideGameplayUI();\n                this.hideEndScreen();\n                break;\n                \n            case 'GAMEPLAY':\n                this.hideStartScreen();\n                this.showGameplayUI();\n                this.hideEndScreen();\n                \n                // Reset progress bar\n                if (this.progressBar) {\n                    this.progressBar.style.width = '0%';\n                }\n                break;\n                \n            case 'END_SCREEN':\n                this.hideStartScreen();\n                this.hideGameplayUI();\n                this.showEndScreen();\n                break;\n        }\n    }\n    \n    /**\n     * Show the start screen\n     */\n    showStartScreen() {\n        this.startScreen.style.display = 'flex';\n        \n        // Add subtle animation to the start screen title\n        const title = this.startScreen.querySelector('h1');\n        if (title) {\n            title.style.opacity = 0;\n            title.style.transform = 'translateY(-20px)';\n            \n            setTimeout(() => {\n                title.style.transition = 'opacity 1s ease, transform 1s ease';\n                title.style.opacity = 1;\n                title.style.transform = 'translateY(0)';\n            }, 100);\n        }\n    }\n    \n    /**\n     * Hide the start screen\n     */\n    hideStartScreen() {\n        this.startScreen.style.display = 'none';\n    }\n    \n    /**\n     * Show the gameplay UI\n     */\n    showGameplayUI() {\n        this.gameplayUI.style.display = 'block';\n        \n        // Add fade-in animation to UI elements\n        const uiElements = this.gameplayUI.querySelectorAll('div[id]');\n        uiElements.forEach((element, index) => {\n            element.style.opacity = 0;\n            \n            setTimeout(() => {\n                element.style.transition = 'opacity 0.5s ease';\n                element.style.opacity = 1;\n            }, 100 * index);\n        });\n        \n        // Display controls panel\n        this.showControlsPanel();\n    }\n    \n    /**\n     * Create and show a controls panel\n     */\n    showControlsPanel() {\n        // Check if panel already exists\n        let controlsPanel = document.getElementById('controls-panel');\n        \n        if (!controlsPanel) {\n            // Create panel\n            controlsPanel = document.createElement('div');\n            controlsPanel.id = 'controls-panel';\n            controlsPanel.className = 'controls-panel';\n            \n            // Add controls information\n            controlsPanel.innerHTML = `\n                <h3>Controls</h3>\n                <table>\n                    <tr>\n                        <td><span class=\"key\">W</span> / <span class=\"key\">↑</span></td>\n                        <td>Move forward</td>\n                    </tr>\n                    <tr>\n                        <td><span class=\"key\">A</span> / <span class=\"key\">←</span></td>\n                        <td>Lean left</td>\n                    </tr>\n                    <tr>\n                        <td><span class=\"key\">D</span> / <span class=\"key\">→</span></td>\n                        <td>Lean right</td>\n                    </tr>\n                    <tr>\n                        <td><span class=\"key\">C</span></td>\n                        <td>Toggle camera mode</td>\n                    </tr>\n                    <tr>\n                        <td><span class=\"key\">Left-click</span></td>\n                        <td>Orbit camera</td>\n                    </tr>\n                    <tr>\n                        <td><span class=\"key\">Right-click</span></td>\n                        <td>Pan camera</td>\n                    </tr>\n                    <tr>\n                        <td><span class=\"key\">Scroll</span></td>\n                        <td>Zoom camera</td>\n                    </tr>\n                </table>\n            `;\n            \n            // Add to DOM\n            document.body.appendChild(controlsPanel);\n        }\n        \n        // Make visible with slight delay\n        setTimeout(() => {\n            controlsPanel.classList.add('visible');\n        }, 500);\n    }\n    \n    /**\n     * Hide the controls panel\n     */\n    hideControlsPanel() {\n        const controlsPanel = document.getElementById('controls-panel');\n        if (controlsPanel) {\n            controlsPanel.classList.remove('visible');\n        }\n    }\n    \n    /**\n     * Hide the gameplay UI\n     */\n    hideGameplayUI() {\n        this.gameplayUI.style.display = 'none';\n        this.hideControlsPanel();\n    }\n    \n    /**\n     * Show the end screen\n     * @param {string} message - The message to display\n     */\n    showEndScreen(message = 'Journey Complete') {\n        this.endScreen.style.display = 'flex';\n        this.endMessage.textContent = message;\n        \n        // Calculate performance metrics\n        const elapsedTime = Math.floor(this.game.clock.elapsedTime);\n        const distance = Math.floor(this.game.character.position * 100);\n        const minutes = Math.floor(elapsedTime / 60);\n        const seconds = elapsedTime % 60;\n        \n        // Format time nicely\n        const timeString = minutes > 0 \n            ? `${minutes} min ${seconds} sec` \n            : `${seconds} seconds`;\n        \n        // Different messages based on success or failure\n        if (message.includes('fell')) {\n            this.performanceMetrics.innerHTML = `\n                <span style=\"color: #e74c3c;\">❌ You lost your balance!</span><br>\n                Distance: ${distance}%<br>\n                Time: ${timeString}\n            `;\n            this.endMessage.style.color = '#e74c3c';\n        } else {\n            this.performanceMetrics.innerHTML = `\n                <span style=\"color: #2ecc71;\">✓ Successfully crossed the rope!</span><br>\n                Time: ${timeString}\n            `;\n            this.endMessage.style.color = '#2ecc71';\n        }\n        \n        // Add subtle animation to the end screen elements\n        const endElements = [this.endMessage, this.performanceMetrics, this.tryAgainButton];\n        endElements.forEach((element, index) => {\n            if (element) {\n                element.style.opacity = 0;\n                element.style.transform = 'translateY(20px)';\n                \n                setTimeout(() => {\n                    element.style.transition = 'opacity 0.8s ease, transform 0.8s ease';\n                    element.style.opacity = 1;\n                    element.style.transform = 'translateY(0)';\n                }, 300 * index);\n            }\n        });\n    }\n    \n    /**\n     * Hide the end screen\n     */\n    hideEndScreen() {\n        this.endScreen.style.display = 'none';\n    }\n    \n    /**\n     * Update the gameplay UI elements\n     * @param {number} balance - Current balance value (-1 to 1)\n     */\n    updateGameplayUI(balance) {\n        // Update balance indicator\n        const balancePercent = 50 + (balance * 50); // Convert to 0-100 range\n        this.balanceMarker.style.left = `${balancePercent}%`;\n        \n        // Change color based on how close to falling\n        const balanceAbs = Math.abs(balance);\n        if (balanceAbs > 0.7) {\n            this.balanceMarker.style.backgroundColor = '#e74c3c'; // Red\n            this.balanceMarker.style.boxShadow = '0 0 8px rgba(231, 76, 60, 0.8)';\n        } else if (balanceAbs > 0.4) {\n            this.balanceMarker.style.backgroundColor = '#f39c12'; // Yellow/Orange\n            this.balanceMarker.style.boxShadow = '0 0 8px rgba(243, 156, 18, 0.8)';\n        } else {\n            this.balanceMarker.style.backgroundColor = 'white';\n            this.balanceMarker.style.boxShadow = '0 0 8px rgba(255, 255, 255, 0.7)';\n        }\n        \n        // Update wind direction\n        this.updateWindDirection();\n        \n        // Update progress bar\n        this.updateProgressBar();\n    }\n    \n    /**\n     * Update the progress bar based on character position\n     */\n    updateProgressBar() {\n        if (this.progressBar && this.game.character) {\n            const progress = this.game.character.position * 100;\n            this.progressBar.style.width = `${progress}%`;\n            \n            // Change color as progress increases\n            if (progress > 80) {\n                this.progressBar.style.background = 'linear-gradient(90deg, #2ecc71, #27ae60)';\n            } else if (progress > 50) {\n                this.progressBar.style.background = 'linear-gradient(90deg, #f1c40f, #f39c12)';\n            } else {\n                this.progressBar.style.background = 'linear-gradient(90deg, #3498db, #2980b9)';\n            }\n        }\n    }\n    \n    /**\n     * Update the wind direction indicator\n     */\n    updateWindDirection() {\n        const physics = this.game.physics;\n        \n        if (!physics || !this.windDirectionElement) return;\n        \n        // No wind\n        if (physics.windForce === 0) {\n            this.windDirectionElement.textContent = 'None';\n            this.windDirectionElement.style.color = 'white';\n            return;\n        }\n        \n        // Determine wind direction and strength\n        let direction = '';\n        let color = '';\n        \n        if (physics.windDirection > 0.2) {\n            direction = 'Right';\n            color = '#3498db'; // Light blue\n        } else if (physics.windDirection < -0.2) {\n            direction = 'Left';\n            color = '#3498db'; // Light blue\n        } else {\n            direction = 'Mild';\n            color = 'white';\n        }\n        \n        // Add strength indicator (arrows)\n        const strength = Math.abs(physics.windForce);\n        let arrows = '';\n        \n        if (strength > 0.35) {\n            arrows = physics.windDirection > 0 ? '→→→' : '←←←';\n            color = '#e74c3c'; // Red\n        } else if (strength > 0.15) {\n            arrows = physics.windDirection > 0 ? '→→' : '←←';\n            color = '#f39c12'; // Yellow/Orange\n        } else {\n            arrows = physics.windDirection > 0 ? '→' : '←';\n        }\n        \n        // Display wind information\n        this.windDirectionElement.innerHTML = `${direction} <span style=\"font-size: 22px;\">${arrows}</span>`;\n        this.windDirectionElement.style.color = color;\n        \n        // Add subtle animation for strong wind\n        if (strength > 0.3) {\n            this.windDirectionElement.style.animation = 'shake 0.5s infinite';\n        } else {\n            this.windDirectionElement.style.animation = 'none';\n        }\n    }\n    \n    /**\n     * Add visual shake effect to UI elements for impact\n     * @param {string} elementId - The ID of the element to shake\n     * @param {number} intensity - Shake intensity (1-5)\n     */\n    shakeElement(elementId, intensity = 3) {\n        const element = document.getElementById(elementId);\n        if (!element) return;\n        \n        // Add shake class if not already present\n        if (!element.classList.contains('shaking')) {\n            element.classList.add('shaking');\n            \n            // Set custom CSS variable for intensity\n            element.style.setProperty('--shake-intensity', `${intensity * 2}px`);\n            \n            // Remove class after animation completes\n            setTimeout(() => {\n                element.classList.remove('shaking');\n            }, 500);\n        }\n    }\n}\n\nexport { UIManager }; ","/**\n * GameState.js\n * Manages game state transitions and state-specific logic\n * Follows the State pattern for clean state management\n */\n\nclass GameState {\n    /**\n     * Initialize the game state\n     */\n    constructor() {\n        this.currentState = null;\n        this.previousState = null;\n        this.stateChangeListeners = [];\n        \n        // Define valid state transitions\n        this.validTransitions = {\n            'START_SCREEN': ['GAMEPLAY'],\n            'GAMEPLAY': ['PAUSED', 'END_SCREEN'],\n            'PAUSED': ['GAMEPLAY', 'START_SCREEN'],\n            'END_SCREEN': ['START_SCREEN']\n        };\n    }\n    \n    /**\n     * Change the current game state\n     * @param {string} newState - The new state to transition to\n     * @returns {boolean} - Whether the transition was successful\n     */\n    changeState(newState) {\n        // Check if the transition is valid\n        if (this.currentState && \n            (!this.validTransitions[this.currentState] || \n             !this.validTransitions[this.currentState].includes(newState))) {\n            console.warn(`Invalid state transition: ${this.currentState} -> ${newState}`);\n            return false;\n        }\n        \n        console.log(`State transition: ${this.currentState || 'NONE'} -> ${newState}`);\n        \n        // Store previous state\n        this.previousState = this.currentState;\n        this.currentState = newState;\n        \n        // Notify listeners\n        this.notifyStateChangeListeners();\n        \n        return true;\n    }\n    \n    /**\n     * Add a listener for state changes\n     * @param {Function} listener - The callback function to call on state change\n     */\n    addStateChangeListener(listener) {\n        if (typeof listener === 'function' && !this.stateChangeListeners.includes(listener)) {\n            this.stateChangeListeners.push(listener);\n        }\n    }\n    \n    /**\n     * Remove a state change listener\n     * @param {Function} listener - The listener to remove\n     */\n    removeStateChangeListener(listener) {\n        const index = this.stateChangeListeners.indexOf(listener);\n        if (index !== -1) {\n            this.stateChangeListeners.splice(index, 1);\n        }\n    }\n    \n    /**\n     * Notify all listeners about a state change\n     * @private\n     */\n    notifyStateChangeListeners() {\n        for (const listener of this.stateChangeListeners) {\n            listener(this.currentState, this.previousState);\n        }\n    }\n}\n\nexport { GameState }; ","// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nclass SimplexNoise {\n\n\tconstructor( r = Math ) {\n\n\t\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\t\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t\t\t[ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t\t\t[ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t\t\t[ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t\t\t[ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t\t\t[ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t\t\t[ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t\t\t[ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\t\tthis.p = [];\n\n\t\tfor ( let i = 0; i < 256; i ++ ) {\n\n\t\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t\t}\n\n\t\t// To remove the need for index wrapping, double the permutation table length\n\t\tthis.perm = [];\n\n\t\tfor ( let i = 0; i < 512; i ++ ) {\n\n\t\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t\t}\n\n\t\t// A lookup table to traverse the simplex around a given point in 4D.\n\t\t// Details can be found where this table is used, in the 4D noise method.\n\t\tthis.simplex = [\n\t\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n\t}\n\n\tdot( g, x, y ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n\t}\n\n\tdot3( g, x, y, z ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n\t}\n\n\tdot4( g, x, y, z, w ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n\t}\n\n\tnoise( xin, yin ) {\n\n\t\tlet n0; // Noise contributions from the three corners\n\t\tlet n1;\n\t\tlet n2;\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tconst F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\t\tconst s = ( xin + yin ) * F2; // Hairy factor for 2D\n\t\tconst i = Math.floor( xin + s );\n\t\tconst j = Math.floor( yin + s );\n\t\tconst G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\t\tconst t = ( i + j ) * G2;\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y) space\n\t\tconst Y0 = j - t;\n\t\tconst x0 = xin - X0; // The x,y distances from the cell origin\n\t\tconst y0 = yin - Y0;\n\n\t\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t\t// Determine which simplex we are in.\n\t\tlet i1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n\t\tlet j1;\n\t\tif ( x0 > y0 ) {\n\n\t\t\ti1 = 1; j1 = 0;\n\n\t\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t\t}\telse {\n\n\t\t\ti1 = 0; j1 = 1;\n\n\t\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n\t\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t\t// c = (3-sqrt(3))/6\n\t\tconst x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\t\tconst y1 = y0 - j1 + G2;\n\t\tconst x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\t\tconst y2 = y0 - 1.0 + 2.0 * G2;\n\t\t// Work out the hashed gradient indices of the three simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\t\tconst gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t\t// Calculate the contribution from the three corners\n\t\tlet t0 = 0.5 - x0 * x0 - y0 * y0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t\t}\n\n\t\tlet t1 = 0.5 - x1 * x1 - y1 * y1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\n\t\t}\n\n\t\tlet t2 = 0.5 - x2 * x2 - y2 * y2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\n\t\t}\n\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to return values in the interval [-1,1].\n\t\treturn 70.0 * ( n0 + n1 + n2 );\n\n\t}\n\n\t// 3D simplex noise\n\tnoise3d( xin, yin, zin ) {\n\n\t\tlet n0; // Noise contributions from the four corners\n\t\tlet n1;\n\t\tlet n2;\n\t\tlet n3;\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tconst F3 = 1.0 / 3.0;\n\t\tconst s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\t\tconst i = Math.floor( xin + s );\n\t\tconst j = Math.floor( yin + s );\n\t\tconst k = Math.floor( zin + s );\n\t\tconst G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\t\tconst t = ( i + j + k ) * G3;\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\t\tconst Y0 = j - t;\n\t\tconst Z0 = k - t;\n\t\tconst x0 = xin - X0; // The x,y,z distances from the cell origin\n\t\tconst y0 = yin - Y0;\n\t\tconst z0 = zin - Z0;\n\n\t\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t\t// Determine which simplex we are in.\n\t\tlet i1; // Offsets for second corner of simplex in (i,j,k) coords\n\n\t\tlet j1;\n\t\tlet k1;\n\t\tlet i2; // Offsets for third corner of simplex in (i,j,k) coords\n\t\tlet j2;\n\t\tlet k2;\n\t\tif ( x0 >= y0 ) {\n\n\t\t\tif ( y0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t\t// X Y Z order\n\n\t\t\t} else if ( x0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t\t// X Z Y order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t} // Z X Y order\n\n\t\t} else { // x0<y0\n\n\t\t\tif ( y0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Z Y X order\n\n\t\t\t} else if ( x0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Y Z X order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t} // Y X Z order\n\n\t\t}\n\n\t\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t\t// c = 1/6.\n\t\tconst x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\t\tconst y1 = y0 - j1 + G3;\n\t\tconst z1 = z0 - k1 + G3;\n\t\tconst x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\t\tconst y2 = y0 - j2 + 2.0 * G3;\n\t\tconst z2 = z0 - k2 + 2.0 * G3;\n\t\tconst x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\t\tconst y3 = y0 - 1.0 + 3.0 * G3;\n\t\tconst z3 = z0 - 1.0 + 3.0 * G3;\n\t\t// Work out the hashed gradient indices of the four simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst kk = k & 255;\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\t\tconst gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\t\tconst gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t\t// Calculate the contribution from the four corners\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t\t}\n\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t\t}\n\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t\t}\n\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t\t}\n\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to stay just inside [-1,1]\n\t\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n\t}\n\n\t// 4D simplex noise\n\tnoise4d( x, y, z, w ) {\n\n\t\t// For faster and easier lookups\n\t\tconst grad4 = this.grad4;\n\t\tconst simplex = this.simplex;\n\t\tconst perm = this.perm;\n\n\t\t// The skewing and unskewing factors are hairy again for the 4D case\n\t\tconst F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\t\tconst G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\t\tlet n0; // Noise contributions from the five corners\n\t\tlet n1;\n\t\tlet n2;\n\t\tlet n3;\n\t\tlet n4;\n\t\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\t\tconst s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\t\tconst i = Math.floor( x + s );\n\t\tconst j = Math.floor( y + s );\n\t\tconst k = Math.floor( z + s );\n\t\tconst l = Math.floor( w + s );\n\t\tconst t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\t\tconst Y0 = j - t;\n\t\tconst Z0 = k - t;\n\t\tconst W0 = l - t;\n\t\tconst x0 = x - X0; // The x,y,z,w distances from the cell origin\n\t\tconst y0 = y - Y0;\n\t\tconst z0 = z - Z0;\n\t\tconst w0 = w - W0;\n\n\t\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t\t// To find out which of the 24 possible simplices we're in, we need to\n\t\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t\t// then find the correct traversal order for the simplex we’re in.\n\t\t// First, six pair-wise comparisons are performed between each possible pair\n\t\t// of the four coordinates, and the results are used to add up binary bits\n\t\t// for an integer index.\n\t\tconst c1 = ( x0 > y0 ) ? 32 : 0;\n\t\tconst c2 = ( x0 > z0 ) ? 16 : 0;\n\t\tconst c3 = ( y0 > z0 ) ? 8 : 0;\n\t\tconst c4 = ( x0 > w0 ) ? 4 : 0;\n\t\tconst c5 = ( y0 > w0 ) ? 2 : 0;\n\t\tconst c6 = ( z0 > w0 ) ? 1 : 0;\n\t\tconst c = c1 + c2 + c3 + c4 + c5 + c6;\n\n\t\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\t\tconst i1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\t\tconst j1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\t\tconst k1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\t\tconst l1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\t\tconst i2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\t\tconst j2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0;\n\t\tconst k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\t\tconst l2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\t\tconst i3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\t\tconst j3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\t\tconst k3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\t\tconst l3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\t\tconst x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\t\tconst y1 = y0 - j1 + G4;\n\t\tconst z1 = z0 - k1 + G4;\n\t\tconst w1 = w0 - l1 + G4;\n\t\tconst x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\t\tconst y2 = y0 - j2 + 2.0 * G4;\n\t\tconst z2 = z0 - k2 + 2.0 * G4;\n\t\tconst w2 = w0 - l2 + 2.0 * G4;\n\t\tconst x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\t\tconst y3 = y0 - j3 + 3.0 * G4;\n\t\tconst z3 = z0 - k3 + 3.0 * G4;\n\t\tconst w3 = w0 - l3 + 3.0 * G4;\n\t\tconst x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\t\tconst y4 = y0 - 1.0 + 4.0 * G4;\n\t\tconst z4 = z0 - 1.0 + 4.0 * G4;\n\t\tconst w4 = w0 - 1.0 + 4.0 * G4;\n\t\t// Work out the hashed gradient indices of the five simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst kk = k & 255;\n\t\tconst ll = l & 255;\n\t\tconst gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\t\tconst gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\t\tconst gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\t\tconst gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\t\tconst gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t\t// Calculate the contribution from the five corners\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t\t}\n\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t\t}\n\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t\t}\n\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t\t}\n\n\t\tlet t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\t\tif ( t4 < 0 ) n4 = 0.0;\n\t\telse {\n\n\t\t\tt4 *= t4;\n\t\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t\t}\n\n\t\t// Sum up and scale the result to cover the range [-1,1]\n\t\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n\t}\n\n}\n\nexport { SimplexNoise };\n","/**\n * Environment.js\n * Handles the game environment - mountains, rope, sky, etc.\n * Manages the 3D environment for the tightrope walker game\n */\n\nimport * as THREE from 'three';\nimport { SimplexNoise } from 'three/examples/jsm/math/SimplexNoise.js';\n\nclass Environment {\n    /**\n     * Initialize the game environment\n     * @param {THREE.Scene} scene - The Three.js scene\n     */\n    constructor(scene) {\n        this.scene = scene;\n        this.rope = null;\n        this.mountains = [];\n        this.clouds = [];\n        this.lights = [];\n        \n        // Rope properties\n        this.ropeSegments = 10;\n        this.ropeThickness = 0.3;\n        \n        // Mountain properties\n        this.mountainDistance = 100;\n        this.mountainHeight = 100;\n        this.mountainRadius = 100;\n        \n        // Platform properties\n        this.platforms = [];\n        this.platformRadius = 8;\n        this.platformHeight = 2;\n        this.startPlatformPosition = null;\n        this.endPlatformPosition = null;\n        \n        // Noise generator for terrain\n        this.noise = null;\n    }\n    \n    /**\n     * Load environment assets and create scene objects\n     * @returns {Promise} - Promise that resolves when loading is complete\n     */\n    async load() {\n        // Initialize noise generator\n        this.noise = new SimplexNoise();\n        \n        // Add skybox\n        this.createSkybox();\n        \n        // Add lighting\n        this.createLighting();\n        \n        // Create terrain\n        this.createTerrain();\n        \n        // Create mountains\n        await this.createMountains();\n        \n        // Create platforms on mountain peaks\n        this.createPlatforms();\n        \n        // Create rope\n        this.createRope();\n        \n        // Create clouds\n     //   this.createClouds();\n        \n        return Promise.resolve();\n    }\n    \n    /**\n     * Create a skybox for the scene\n     */\n    createSkybox() {\n        // Create a realistic sky gradient\n        const vertexShader = `\n            varying vec3 vWorldPosition;\n            void main() {\n                vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n                vWorldPosition = worldPosition.xyz;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }\n        `;\n        \n        const fragmentShader = `\n            uniform vec3 topColor;\n            uniform vec3 bottomColor;\n            uniform float offset;\n            uniform float exponent;\n            varying vec3 vWorldPosition;\n            void main() {\n                float h = normalize(vWorldPosition + offset).y;\n                gl_FragColor = vec4(mix(bottomColor, topColor, max(pow(max(h, 0.0), exponent), 0.0)), 1.0);\n            }\n        `;\n        \n        const uniforms = {\n            topColor: { value: new THREE.Color(0x0077ff) },\n            bottomColor: { value: new THREE.Color(0xafffff) },\n            offset: { value: 33 },\n            exponent: { value: 0.6 }\n        };\n        \n        const skyMaterial = new THREE.ShaderMaterial({\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n            uniforms: uniforms,\n            side: THREE.BackSide\n        });\n        \n        const skyGeometry = new THREE.SphereGeometry(500, 32, 32);\n        const sky = new THREE.Mesh(skyGeometry, skyMaterial);\n        this.scene.add(sky);\n    }\n    \n    /**\n     * Create scene lighting\n     */\n    createLighting() {\n        // Ambient light for global illumination\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n        this.scene.add(ambientLight);\n        this.lights.push(ambientLight);\n        \n        // Directional light for shadows (sunlight)\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n        directionalLight.position.set(100, 100, 50);\n        directionalLight.castShadow = true;\n        \n        // Configure shadow properties\n        directionalLight.shadow.mapSize.width = 4096;\n        directionalLight.shadow.mapSize.height = 4096;\n        directionalLight.shadow.camera.near = 10;\n        directionalLight.shadow.camera.far = 500;\n        directionalLight.shadow.camera.left = -150;\n        directionalLight.shadow.camera.right = 150;\n        directionalLight.shadow.camera.top = 150;\n        directionalLight.shadow.camera.bottom = -150;\n        \n        this.scene.add(directionalLight);\n        this.lights.push(directionalLight);\n        \n        // Add hemisphere light for more natural outdoor lighting\n        const hemisphereLight = new THREE.HemisphereLight(0x0088ff, 0x00ff88, 0.6);\n        this.scene.add(hemisphereLight);\n        this.lights.push(hemisphereLight);\n    }\n    \n    /**\n     * Create base terrain with realistic features\n     */\n    createTerrain() {\n        // Create a large terrain with rolling hills\n        const terrainSize = 1000;\n        const terrainSegments = 100;\n        \n        // Generate terrain geometry with noise-based height\n        const geometry = new THREE.PlaneGeometry(terrainSize, terrainSize, terrainSegments, terrainSegments);\n        geometry.rotateX(-Math.PI / 2); // Make it horizontal\n        \n        // Apply noise to terrain vertices\n        const vertices = geometry.attributes.position.array;\n        for (let i = 0; i < vertices.length; i += 3) {\n            // Skip the center area where mountains will be\n            const x = vertices[i];\n            const z = vertices[i + 2];\n            const distanceFromCenter = Math.sqrt(x * x + z * z);\n            \n            if (distanceFromCenter > this.mountainRadius + 10) {\n                // Apply noise-based height, decreasing near mountains\n                const noiseHeight = this.noise.noise(x * 0.01, z * 0.01) * 15;\n                const falloffFactor = Math.min(1, (distanceFromCenter - this.mountainRadius - 10) / 50);\n                vertices[i + 1] = noiseHeight * falloffFactor - 10; // Base terrain height (-10)\n            } else {\n                // Flatten the area near mountains\n                vertices[i + 1] = -10;\n            }\n        }\n        \n        // Update the geometry after modifying vertices\n        geometry.computeVertexNormals();\n        \n        // Create terrain texture material with grass and dirt\n        const textureLoader = new THREE.TextureLoader();\n        const repeatFactor = 50;\n        \n        // Load textures asynchronously (would normally use await but simplified here)\n        const grassTexture = textureLoader.load('https://threejs.org/examples/textures/terrain/grasslight-big.jpg');\n        grassTexture.wrapS = grassTexture.wrapT = THREE.RepeatWrapping;\n        grassTexture.repeat.set(repeatFactor, repeatFactor);\n        \n        const terrainMaterial = new THREE.MeshStandardMaterial({\n            map: grassTexture,\n            roughness: 0.8,\n            metalness: 0.1,\n            color: 0x507050\n        });\n        \n        const terrain = new THREE.Mesh(geometry, terrainMaterial);\n        terrain.receiveShadow = true;\n        \n        this.scene.add(terrain);\n    }\n    \n    /**\n     * Create realistic mountains at each end of the rope\n     */\n    async createMountains() {\n        // Use more complex geometry for realistic mountains\n        await this.createRealisticMountain(\n            new THREE.Vector3(0, 0, this.mountainDistance),\n            this.mountainHeight,\n            this.mountainRadius,\n            true // Start mountain\n        );\n        \n        await this.createRealisticMountain(\n            new THREE.Vector3(0, 0, -this.mountainDistance),\n            this.mountainHeight,\n            this.mountainRadius,\n            false // End mountain\n        );\n    }\n    \n    /**\n     * Create a realistic mountain using noise-based displacement\n     * Extend the mountain geometry to better integrate with platforms on top\n     * @param {THREE.Vector3} position - The position of the mountain\n     * @param {number} height - The height of the mountain\n     * @param {number} radius - The radius of the mountain base\n     * @param {boolean} isStartMountain - Whether this is the starting mountain\n     */\n    async createRealisticMountain(position, height, radius, isStartMountain) {\n        // Create a more detailed cone with more segments\n        const geometry = new THREE.ConeGeometry(\n            radius,\n            height,\n            48, // More radial segments\n            32, // More height segments\n            false\n        );\n        \n        // Apply noise to vertices to create rocky features\n        const vertices = geometry.attributes.position.array;\n        \n        // Get the y range of the cone to apply appropriate noise\n        let minY = Infinity;\n        let maxY = -Infinity;\n        for (let i = 0; i < vertices.length; i += 3) {\n            const y = vertices[i + 1];\n            minY = Math.min(minY, y);\n            maxY = Math.max(maxY, y);\n        }\n        \n        // Apply noise based on height\n        for (let i = 0; i < vertices.length; i += 3) {\n            const x = vertices[i];\n            const y = vertices[i + 1];\n            const z = vertices[i + 2];\n            \n            // Normalize height from 0 to 1\n            const heightFactor = (y - minY) / (maxY - minY);\n            \n            // Calculate distance from center axis\n            const distFromCenter = Math.sqrt(x * x + z * z);\n            \n            // Reduce noise near the very top to create a flatter platform area\n            // Use a smoother transition for the top 5% of the mountain\n            let topFlatteningFactor = 1.0;\n            if (heightFactor > 0.95) {\n                // Calculate how close we are to the very top (0 at 0.95, 1 at 1.0)\n                const topFactor = (heightFactor - 0.95) / 0.05;\n                // Reduce noise at the top for a flatter surface\n                topFlatteningFactor = 1.0 - (topFactor * 0.9); // Gradually reduce to 0.1 at top\n            }\n            \n            // Larger noise near the top (but not at the very top), smoother at the bottom\n            const noiseScale = 0.1 + (heightFactor * 0.3 * topFlatteningFactor);\n            const noiseMagnitude = 2 + (heightFactor * 3 * topFlatteningFactor);\n            \n            // Add some small scale noise for fine details\n            const detailNoise = this.noise.noise(x * 0.5, y * 0.5, z * 0.5) * 0.5 * topFlatteningFactor;\n            \n            // Add medium scale noise for rock formations\n            const rockNoise = this.noise.noise(x * noiseScale, y * noiseScale, z * noiseScale) * noiseMagnitude * topFlatteningFactor;\n            \n            // Less displacement near the top peak\n            const peakSmoothingFactor = Math.max(0, 1 - Math.pow(heightFactor, 3) * 8);\n            \n            // Apply noise as displacement along normal (approximated)\n            const normalizedX = x / distFromCenter;\n            const normalizedZ = z / distFromCenter;\n            \n            if (!isNaN(normalizedX) && !isNaN(normalizedZ)) {\n                vertices[i] += normalizedX * (rockNoise + detailNoise) * peakSmoothingFactor;\n                // Less vertical displacement\n                vertices[i + 1] += (rockNoise + detailNoise) * 0.3 * peakSmoothingFactor;\n                vertices[i + 2] += normalizedZ * (rockNoise + detailNoise) * peakSmoothingFactor;\n            }\n        }\n        \n        // Update geometry after modifying vertices\n        geometry.computeVertexNormals();\n        \n        // Create texture loader\n        const textureLoader = new THREE.TextureLoader();\n        \n        // Create materials for different parts of the mountain\n        const rockMaterial = new THREE.MeshStandardMaterial({ \n            color: 0x777777,\n            roughness: 0.9,\n            metalness: 0.1,\n            flatShading: true\n        });\n        \n        const snowMaterial = new THREE.MeshStandardMaterial({ \n            color: 0xffffff,\n            roughness: 0.8,\n            metalness: 0.1\n        });\n        \n        // Create the main mountain mesh\n        const mountain = new THREE.Mesh(geometry, rockMaterial);\n        mountain.position.copy(position);\n        mountain.castShadow = true;\n        mountain.receiveShadow = true;\n        this.scene.add(mountain);\n        this.mountains.push(mountain);\n        \n        // Create snow cap using the same noise pattern but only for the top portion\n        const snowCapGeometry = geometry.clone();\n        const snowCapVertices = snowCapGeometry.attributes.position.array;\n        \n        // Only keep the top portion for snow\n        for (let i = 0; i < snowCapVertices.length; i += 3) {\n            const y = snowCapVertices[i + 1];\n            const heightFactor = (y - minY) / (maxY - minY);\n            \n            // Determine snow height with some noise for a natural look\n            const x = snowCapVertices[i];\n            const z = snowCapVertices[i + 2];\n            const snowNoise = this.noise.noise(x * 0.1, z * 0.1) * 0.1;\n            // Make snow cover more of the mountain - start at 65% instead of 70%\n            const snowThreshold = 0.65 + snowNoise;\n            \n            if (heightFactor < snowThreshold) {\n                // Below snow line - scale this vertex to be inside the mountain\n                snowCapVertices[i] *= 0.98;  // Slightly shrink to avoid z-fighting\n                snowCapVertices[i + 1] = minY - 10;  // Move below the mountain\n                snowCapVertices[i + 2] *= 0.98;\n            }\n        }\n        \n        // Update snow cap geometry\n        snowCapGeometry.computeVertexNormals();\n        \n        // Create snow cap mesh\n        const snowCap = new THREE.Mesh(snowCapGeometry, snowMaterial);\n        snowCap.position.copy(position);\n        snowCap.castShadow = true;\n        this.scene.add(snowCap);\n        \n        // Add some rock formations around the base\n        this.addRockFormations(position, radius);\n        \n        // Create a slightly flatter area at the top for the platform\n        this.createMountainTop(position, height, isStartMountain);\n    }\n    \n    /**\n     * Create a slightly flatter area at the mountain top for the platform\n     * @param {THREE.Vector3} position - The position of the mountain\n     * @param {number} mountainHeight - The height of the mountain\n     * @param {boolean} isStartMountain - Whether this is the starting mountain\n     */\n    createMountainTop(position, mountainHeight, isStartMountain) {\n\n        console.log(position, mountainHeight, isStartMountain);\n        // Calculate the platform position at the top of the mountain\n        const platformPosition = new THREE.Vector3(\n            position.x,\n            position.y + mountainHeight / 2 ,\n            position.z\n        );\n        \n        // Store this as the correct platform position\n        if (isStartMountain) {\n            this.startPlatformPosition = platformPosition;\n        } else {\n            this.endPlatformPosition = platformPosition;\n        }\n    }\n    \n    /**\n     * Add rock formations around the mountain base\n     * @param {THREE.Vector3} mountainPosition - The position of the mountain\n     * @param {number} mountainRadius - The radius of the mountain base\n     */\n    addRockFormations(mountainPosition, mountainRadius) {\n        const rockMaterial = new THREE.MeshStandardMaterial({ \n            color: 0x555555,\n            roughness: 1.0,\n            metalness: 0.0,\n            flatShading: true\n        });\n        \n        // Create 8-12 rock formations around the mountain\n        const numRocks = 8 + Math.floor(Math.random() * 5);\n        const minDistance = mountainRadius * 0.5;\n        const maxDistance = mountainRadius * 0.9;\n        \n        for (let i = 0; i < numRocks; i++) {\n            // Random position around the mountain\n            const angle = Math.random() * Math.PI * 2;\n            const distance = minDistance + Math.random() * (maxDistance - minDistance);\n            const x = Math.cos(angle) * distance;\n            const z = Math.sin(angle) * distance;\n            \n            // Random size for the rock\n            const rockSize = 3 + Math.random() * 7;\n            const rockHeight = 2 + Math.random() * 5;\n            \n            // Create rock geometry - use a sphere or cone with noise\n            let rockGeometry;\n            if (Math.random() > 0.5) {\n                rockGeometry = new THREE.SphereGeometry(rockSize, 8, 6);\n            } else {\n                rockGeometry = new THREE.ConeGeometry(rockSize, rockHeight, 8);\n            }\n            \n            // Apply noise to vertices\n            const vertices = rockGeometry.attributes.position.array;\n            for (let j = 0; j < vertices.length; j += 3) {\n                const vx = vertices[j];\n                const vy = vertices[j + 1];\n                const vz = vertices[j + 2];\n                \n                // Apply 3D noise\n                const noise = this.noise.noise(vx * 0.3, vy * 0.3, vz * 0.3) * 1.5;\n                vertices[j] += vx * 0.2 * noise;\n                vertices[j + 1] += vy * 0.2 * noise;\n                vertices[j + 2] += vz * 0.2 * noise;\n            }\n            \n            rockGeometry.computeVertexNormals();\n            \n            // Create rock mesh\n            const rock = new THREE.Mesh(rockGeometry, rockMaterial);\n            rock.position.set(\n                mountainPosition.x + x,\n                mountainPosition.y - 5 + (Math.random() * 2), // Slightly buried\n                mountainPosition.z + z\n            );\n            \n            // Random rotation\n            rock.rotation.set(\n                Math.random() * Math.PI * 2,\n                Math.random() * Math.PI * 2,\n                Math.random() * Math.PI * 2\n            );\n            \n            rock.castShadow = true;\n            rock.receiveShadow = true;\n            this.scene.add(rock);\n        }\n    }\n    \n    /**\n     * Create platforms on mountain peaks\n     */\n    createPlatforms() {\n        if (!this.startPlatformPosition || !this.endPlatformPosition) return;\n        \n        // Create wood texture for platforms\n        const textureLoader = new THREE.TextureLoader();\n        const woodTexture = textureLoader.load('https://threejs.org/examples/textures/hardwood2_diffuse.jpg');\n        woodTexture.wrapS = woodTexture.wrapT = THREE.RepeatWrapping;\n        woodTexture.repeat.set(2, 2);\n        \n        // Create platform material\n        const platformMaterial = new THREE.MeshStandardMaterial({\n            map: woodTexture,\n            roughness: 0.8,\n            metalness: 0.1\n        });\n        \n        // Create start platform (cylindrical shape with more flattened appearance)\n        const startPlatformGeometry = new THREE.CylinderGeometry(\n            this.platformRadius, // top radius\n            this.platformRadius * 1.05, // slightly wider bottom radius\n            this.platformHeight, // height\n            16 // radial segments\n        );\n        \n        const startPlatform = new THREE.Mesh(startPlatformGeometry, platformMaterial);\n        startPlatform.position.copy(this.startPlatformPosition); \n        startPlatform.receiveShadow = true;\n        console.log(\"startPlatform\",startPlatform);\n        this.scene.add(startPlatform);\n        this.platforms.push(startPlatform);\n        \n        // Create end platform\n        const endPlatformGeometry = new THREE.CylinderGeometry(\n            this.platformRadius,\n            this.platformRadius * 1.05,\n            this.platformHeight,\n            16\n        );\n        \n        const endPlatform = new THREE.Mesh(endPlatformGeometry, platformMaterial);\n        endPlatform.position.copy(this.endPlatformPosition);\n        endPlatform.receiveShadow = true;\n        this.scene.add(endPlatform);\n        this.platforms.push(endPlatform);\n        \n        // Add railing to platforms for visual detail\n        this.addPlatformRailings(startPlatform, true);\n        this.addPlatformRailings(endPlatform, false);\n    }\n    \n    /**\n     * Add railings to platforms\n     * @param {THREE.Mesh} platform - The platform to add railings to\n     * @param {boolean} isStartPlatform - Whether this is the starting platform\n     */\n    addPlatformRailings(platform, isStartPlatform) {\n        const railingHeight = 1.2;\n        const railingThickness = 0.1;\n        const postCount = 8;\n        \n        // Create post material\n        const postMaterial = new THREE.MeshStandardMaterial({\n            color: 0x8B4513, // Dark brown\n            roughness: 0.9,\n            metalness: 0.1\n        });\n        \n        // Create posts around the platform edge\n        for (let i = 0; i < postCount; i++) {\n            // Skip the area where the rope connects\n            if (isStartPlatform && (i === 0 || i === postCount - 1)) continue;\n            if (!isStartPlatform && (i === postCount/2 || i === postCount/2 - 1)) continue;\n            \n            const angle = (i / postCount) * Math.PI * 2;\n            const x = Math.cos(angle) * (this.platformRadius - railingThickness/2);\n            const z = Math.sin(angle) * (this.platformRadius - railingThickness/2);\n            \n            // Create post geometry\n            const postGeometry = new THREE.CylinderGeometry(\n                railingThickness,\n                railingThickness,\n                railingHeight,\n                8\n            );\n            \n            const post = new THREE.Mesh(postGeometry, postMaterial);\n            post.position.set(\n                platform.position.x + x,\n                platform.position.y + this.platformHeight/2 + railingHeight/2,\n                platform.position.z + z\n            );\n            \n            post.castShadow = true;\n            this.scene.add(post);\n        }\n    }\n    \n    /**\n     * Create a rope between mountains\n     */\n    createRope() {\n        // Check if platforms are created\n        if (!this.startPlatformPosition || !this.endPlatformPosition) return;\n        \n        // Create a rope using a tube geometry with a subtle natural curve\n        const ropePoints = [];\n        \n        // Start point on the edge of the starting platform\n        const startPoint = new THREE.Vector3(\n            this.startPlatformPosition.x,\n            this.startPlatformPosition.y + this.platformHeight/2 + this.ropeThickness/2,\n            this.startPlatformPosition.z - this.platformRadius\n        );\n        \n        // End point on the edge of the end platform\n        const endPoint = new THREE.Vector3(\n            this.endPlatformPosition.x,\n            this.endPlatformPosition.y + this.platformHeight/2 + this.ropeThickness/2,\n            this.endPlatformPosition.z + this.platformRadius\n        );\n        \n        // Use more segments for a smoother rope\n        const segments = this.ropeSegments;\n        \n        // Calculate a subtle sag amount - adjust the divisor to control tightness\n        // Higher values = less sag, lower values = more sag\n        const maxSag = this.mountainDistance / 40; // Just a slight sag\n        \n        for (let i = 0; i <= segments; i++) {\n            const t = i / segments;\n            \n            // Linear interpolation for x and z coordinates\n            const x = startPoint.x + (endPoint.x - startPoint.x) * t;\n            const z = startPoint.z + (endPoint.z - startPoint.z) * t;\n            \n            // Calculate base y position through linear interpolation\n            const baseY = startPoint.y + (endPoint.y - startPoint.y) * t;\n            \n            // Apply a natural curve - most pronounced in the middle (at t=0.5)\n            // Using a sine function to create a smooth natural-looking curve\n            // sin(π*t) produces a nice curve that's 0 at t=0 and t=1, and 1 at t=0.5\n            const sag = Math.sin(Math.PI * t) * maxSag;\n            \n            // Final y position is base height minus sag\n            const y = baseY - sag;\n            \n            ropePoints.push(new THREE.Vector3(x, y, z));\n        }\n        \n        // Create a curve from points\n        const ropeCurve = new THREE.CatmullRomCurve3(ropePoints);\n        \n        // Create tube geometry from curve\n        const ropeGeometry = new THREE.TubeGeometry(\n            ropeCurve,\n            segments, // More tubular segments for smoother curve\n            this.ropeThickness,\n            8, // Radial segments\n            false // Not closed\n        );\n        \n        // Create a textured rope material\n        const textureLoader = new THREE.TextureLoader();\n        const ropeTexture = textureLoader.load('https://threejs.org/examples/textures/rope.jpg');\n        ropeTexture.wrapS = THREE.RepeatWrapping;\n        ropeTexture.wrapT = THREE.RepeatWrapping;\n        ropeTexture.repeat.set(15, 1);\n        \n        const ropeMaterial = new THREE.MeshStandardMaterial({ \n            map: ropeTexture,\n            color: 0x8B4513, // Darker brown color\n            roughness: 0.9,\n            metalness: 0.0\n        });\n        \n        this.rope = new THREE.Mesh(ropeGeometry, ropeMaterial);\n        this.rope.castShadow = true;\n        \n        this.scene.add(this.rope);\n    }\n    \n    /**\n     * Create clouds in the scene\n     */\n    createClouds() {\n        // Create a volumetric-looking cloud material\n        const cloudMaterial = new THREE.MeshStandardMaterial({ \n            color: 0xffffff,\n            roughness: 0.5,\n            metalness: 0.1,\n            transparent: true,\n            opacity: 0.9\n        });\n        \n        // Create more clouds for a dense sky\n        for (let i = 0; i < 30; i++) {\n            const cloudGroup = new THREE.Group();\n            \n            // Create 4-8 spheres per cloud for more volume\n            const numSpheres = 4 + Math.floor(Math.random() * 5);\n            \n            for (let j = 0; j < numSpheres; j++) {\n                const radius = 8 + Math.random() * 8;\n                const sphereGeometry = new THREE.SphereGeometry(radius, 8, 8);\n                const sphere = new THREE.Mesh(sphereGeometry, cloudMaterial);\n                \n                // Position spheres to form a cloud\n                sphere.position.set(\n                    j * 10 - (numSpheres * 5) + Math.random() * 10,\n                    Math.random() * 5,\n                    Math.random() * 10\n                );\n                \n                // Slightly flatten the cloud spheres\n                sphere.scale.y = 0.6 + Math.random() * 0.2;\n                \n                cloudGroup.add(sphere);\n            }\n            \n            // Position cloud in sky\n            cloudGroup.position.set(\n                Math.random() * 600 - 300,\n                80 + Math.random() * 50, // Higher clouds\n                Math.random() * 600 - 300\n            );\n            \n            // Scale entire cloud randomly\n            const cloudScale = 0.8 + Math.random() * 1.5;\n            cloudGroup.scale.set(cloudScale, cloudScale, cloudScale);\n            \n            this.scene.add(cloudGroup);\n            this.clouds.push(cloudGroup);\n            \n            // Add cloud movement properties\n            cloudGroup.userData = {\n                speedX: (Math.random() * 2 - 1) * 3, // Faster movement\n                speedZ: (Math.random() * 2 - 1) * 3,\n                rotationSpeed: (Math.random() * 2 - 1) * 0.01 // Slow rotation\n            };\n        }\n    }\n    \n    /**\n     * Update environment elements\n     * @param {number} deltaTime - Time since last update in seconds\n     */\n    update(deltaTime) {\n        // Update cloud positions\n        for (const cloud of this.clouds) {\n            cloud.position.x += cloud.userData.speedX * deltaTime;\n            cloud.position.z += cloud.userData.speedZ * deltaTime;\n            \n            // Add gentle rotation for more dynamic clouds\n            cloud.rotation.y += cloud.userData.rotationSpeed * deltaTime;\n            \n            // Loop clouds when they go too far\n            if (cloud.position.x > 300) cloud.position.x = -300;\n            if (cloud.position.x < -300) cloud.position.x = 300;\n            if (cloud.position.z > 300) cloud.position.z = -300;\n            if (cloud.position.z < -300) cloud.position.z = 300;\n        }\n    }\n}\n\nexport { Environment }; ","/**\n * Game.js\n * Main entry point for the Tightrope Walker Game\n * Responsible for initializing the game and orchestrating components\n */\n\nimport * as THREE from 'three';\nimport { CameraController } from './views/CameraController.js';\nimport { Character } from './models/Character.js';\nimport { Physics } from './models/Physics.js';\nimport { UIManager } from './views/UIManager.js';\nimport { GameState } from './viewmodels/GameState.js';\nimport { Environment } from './models/Environment.js';\n\nclass Game {\n    /**\n     * Initialize the game instance\n     */\n    constructor() {\n        // Three.js core components\n        this.scene = null;\n        this.renderer = null;\n        this.clock = null;\n        \n        // Game components\n        this.gameState = null;\n        this.uiManager = null;\n        this.cameraController = null;\n        this.character = null;\n        this.physics = null;\n        this.environment = null;\n        \n        // Game settings\n        this.gameContainer = document.getElementById('game-container');\n        \n        // Bind methods to this instance\n        this.update = this.update.bind(this);\n        this.onWindowResize = this.onWindowResize.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n    }\n    \n    /**\n     * Initialize all game components\n     */\n    async init() {\n        console.log('Initializing game...');\n        \n        // Create Three.js scene\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0x87CEEB); // Sky blue\n        \n        // Setup renderer\n        this.renderer = new THREE.WebGLRenderer({ antialias: true });\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.shadowMap.enabled = true;\n        this.gameContainer.appendChild(this.renderer.domElement);\n        \n        // Create camera\n        const camera = new THREE.PerspectiveCamera(\n            75, window.innerWidth / window.innerHeight, 0.1, 1000\n        );\n        this.cameraController = new CameraController(this.scene, camera);\n        \n        // Initialize game clock\n        this.clock = new THREE.Clock();\n        \n        // Initialize game state\n        this.gameState = new GameState();\n        \n        // Initialize UI manager\n        this.uiManager = new UIManager(this);\n        \n        // Initialize physics engine\n        this.physics = new Physics();\n        \n        // Initialize environment (mountains, rope, etc.)\n        this.environment = new Environment(this.scene);\n        await this.environment.load();\n        \n        // Initialize character\n        this.character = new Character(this.scene, this.environment.rope, this.environment);\n        await this.character.load();\n        \n        // Set references for camera controller\n        this.cameraController.setReferences(this.character, this.environment);\n        \n        // Register event listeners\n        window.addEventListener('resize', this.onWindowResize);\n        window.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('keyup', this.handleKeyUp);\n        \n        // Set initial game state\n        this.gameState.changeState('START_SCREEN');\n        \n        console.log('Game initialization complete');\n    }\n    \n    /**\n     * Start the game loop\n     */\n    start() {\n        console.log('Starting game loop');\n        this.update();\n    }\n    \n    /**\n     * Main game loop\n     */\n    update() {\n        requestAnimationFrame(this.update);\n        \n        const deltaTime = this.clock.getDelta();\n        \n        // Update game based on current state\n        switch (this.gameState.currentState) {\n            case 'START_SCREEN':\n                // Update camera for start screen\n                this.cameraController.update(deltaTime);\n                break;\n                \n            case 'GAMEPLAY':\n                // Apply physics\n                this.physics.applyForces(this.character, deltaTime);\n                \n                // Update character\n                this.character.update(deltaTime);\n                \n                // Update environment\n                this.environment.update(deltaTime);\n                \n                // Update camera to follow character\n                this.cameraController.update(deltaTime);\n                \n                // Update UI\n                this.uiManager.updateGameplayUI(this.character.balance);\n                \n                // Check for game over condition\n                if (!this.physics.checkBalance(this.character)) {\n                    this.gameState.changeState('END_SCREEN');\n                    this.uiManager.showEndScreen('You fell!');\n                }\n                \n                // Check for win condition - character reaches end platform and is on platform\n                if (this.character.position >= 0.98 && this.character.isOnPlatform) {\n                    this.gameState.changeState('END_SCREEN');\n                    this.uiManager.showEndScreen('You made it across!');\n                }\n                break;\n                \n            case 'END_SCREEN':\n                // Just render the scene\n                break;\n        }\n        \n        // Render the scene\n        this.renderer.render(this.scene, this.cameraController.camera);\n    }\n    \n    /**\n     * Handle window resize events\n     */\n    onWindowResize() {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        \n        this.cameraController.camera.aspect = width / height;\n        this.cameraController.camera.updateProjectionMatrix();\n        \n        this.renderer.setSize(width, height);\n    }\n    \n    /**\n     * Handle keydown events\n     * @param {KeyboardEvent} event - The keydown event\n     */\n    handleKeyDown(event) {\n        if (this.gameState.currentState !== 'GAMEPLAY') return;\n        \n        switch (event.key) {\n            case 'ArrowLeft':\n            case 'a':\n            case 'A':\n                // Check if on platform and call the appropriate function\n                if (this.character.isOnPlatform) {\n                    this.character.moveLeft();\n                } else {\n                    this.character.adjustBalance(-1);\n                }\n                break;\n                \n            case 'ArrowRight':\n            case 'd':\n            case 'D':\n                // Check if on platform and call the appropriate function\n                if (this.character.isOnPlatform) {\n                    this.character.moveRight();\n                } else {\n                    this.character.adjustBalance(1);\n                }\n                break;\n                \n            case 'ArrowUp':\n            case 'w':\n            case 'W':\n                this.character.moveForward();\n                break;\n                \n            case 'ArrowDown':\n            case 's':\n            case 'S':\n                // Only allow backward movement on platform\n                if (this.character.isOnPlatform) {\n                    this.character.moveBackward();\n                }\n                break;\n                \n            case 'q':\n            case 'Q':\n                // Rotate character to the left (counterclockwise)\n                if (this.character.isOnPlatform) {\n                    this.character.rotateLeft();\n                }\n                break;\n                \n            case 'e':\n            case 'E':\n                // Rotate character to the right (clockwise)\n                if (this.character.isOnPlatform) {\n                    this.character.rotateRight();\n                }\n                break;\n                \n            case 'c':\n            case 'C':\n                // Toggle camera mode when 'C' is pressed\n                this.toggleCameraMode();\n                break;\n        }\n    }\n    \n    /**\n     * Handle keyup events\n     * @param {KeyboardEvent} event - The keyup event\n     */\n    handleKeyUp(event) {\n        if (this.gameState.currentState !== 'GAMEPLAY') return;\n        \n        switch (event.key) {\n            case 'ArrowLeft':\n            case 'a':\n            case 'A':\n                if (this.character.isOnPlatform) {\n                    this.character.stopMovingLeft();\n                } else {\n                    this.character.adjustBalance(0); // Reset balance adjustment\n                }\n                break;\n                \n            case 'ArrowRight':\n            case 'd':\n            case 'D':\n                if (this.character.isOnPlatform) {\n                    this.character.stopMovingRight();\n                } else {\n                    this.character.adjustBalance(0); // Reset balance adjustment\n                }\n                break;\n                \n            case 'ArrowUp':\n            case 'w':\n            case 'W':\n                this.character.stopMoving();\n                break;\n                \n            case 'ArrowDown':\n            case 's':\n            case 'S':\n                if (this.character.isOnPlatform) {\n                    this.character.stopMovingBackward();\n                }\n                break;\n                \n            case 'q':\n            case 'Q':\n                if (this.character.isOnPlatform) {\n                    this.character.stopRotatingLeft();\n                }\n                break;\n                \n            case 'e':\n            case 'E':\n                if (this.character.isOnPlatform) {\n                    this.character.stopRotatingRight();\n                }\n                break;\n        }\n    }\n    \n    /**\n     * Toggle between automatic camera following and manual camera control\n     */\n    toggleCameraMode() {\n        // Determine current state based on whether mouse controls are enabled\n        const isCurrentlyManual = this.cameraController.enableMouseControls;\n        \n        if (isCurrentlyManual) {\n            // Switch to automatic camera following\n            this.cameraController.setMouseControlsEnabled(false);\n            \n            // Animate to gameplay position\n            const characterPos = this.character.model.position.clone();\n            const position = new THREE.Vector3(\n                characterPos.x, \n                characterPos.y + 3, // Was +5, reduced to +3 for closer third-person view\n                characterPos.z + 8   // Was +15, reduced to +8 for closer third-person view\n            );\n            const lookAt = new THREE.Vector3(\n                characterPos.x,\n                characterPos.y + 1, // Added +1 to look slightly higher\n                characterPos.z - 10  // Was -20, changed to -10 to look closer\n            );\n            \n            this.cameraController.animateToPosition(position, lookAt, 1.0);\n            \n            // Show notification\n            this.uiManager.showNotification('Camera Mode: Automatic Following', 2000);\n            \n            // Set follow target to character for continuous following\n            this.cameraController.setFollowTarget(this.character.model);\n        } else {\n            // Switch to manual camera control\n            this.cameraController.setMouseControlsEnabled(true);\n            \n            // Clear follow target when in manual mode\n            this.cameraController.clearFollowTarget();\n            \n            // Show detailed notification about camera controls\n            this.uiManager.showNotification('Camera Mode: Manual Control', 2000);\n            \n            // Show additional instructions with slight delay\n            setTimeout(() => {\n                this.uiManager.showNotification('Left-click: Orbit | Right-click: Pan | Scroll: Zoom', 4000);\n            }, 2500);\n        }\n    }\n}\n\n// Create and initialize the game\nconst game = new Game();\ngame.init().then(() => {\n    game.start();\n});\n\nexport { Game }; "],"names":["CameraController","scene","camera","THREE.Vector3","event","deltaX","deltaY","right","up","distanceScale","zoomAmount","sinV","cosV","sinH","cosH","x","y","z","target","position","targetPosition","lookAtPosition","deltaTime","enabled","offset","character","environment","lookAt","characterPos","platformPos","duration","t","targetPos","facingDirection","desiredPosition","lookAhead","lookAtPoint","Character","rope","THREE.Clock","THREE.Vector2","THREE.Group","skinMaterial","THREE.MeshStandardMaterial","clothingMaterial","shoeMaterial","poleMaterial","headGeometry","THREE.SphereGeometry","THREE.Mesh","hairMaterial","hairGeometry","hair","eyeMaterial","THREE.MeshBasicMaterial","eyeGeometry","leftEye","rightEye","torsoGeometry","THREE.BoxGeometry","armGeometry","THREE.CylinderGeometry","leftArmMesh","rightArmMesh","handGeometry","leftHand","rightHand","legGeometry","leftLegMesh","rightLegMesh","footGeometry","leftFoot","rightFoot","poleGeometry","platformRadius","platformHeight","lookDirection","curve","point","tangent","rightVector","ropeStartPoint","distanceToRopeStart","toRope","dotProduct","facingRope","angleToDegrees","prevNearRope","prevOnRopeEdge","stateChanged","balanceChanged","legAngle","armAngle","balanceAdjustment","armSway","bodySway","direction","intensity","windForce","stepProgress","easedProgress","endStepWobble","recoveryForce","randomNoise","windNoise","absBalance","stepDisturbance","randomDirection","targetDifficulty","moveX","moveZ","isMoving","isRotating","length","currentSpeed","isLeftFoot","ropeEndPoint","dirToCenter","dx","dz","distanceFromCenter","distanceToRope","dirX","dirZ","ropeDir","angleCos","angleDegrees","newRadius","Physics","progressFactor","UIManager","game","notificationContainer","notification","style","message","newState","previousState","title","element","index","controlsPanel","elapsedTime","distance","minutes","seconds","timeString","balance","balancePercent","balanceAbs","progress","physics","color","strength","arrows","elementId","GameState","listener","SimplexNoise","r","i","g","w","xin","yin","n0","n1","n2","F2","s","j","G2","X0","Y0","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","zin","n3","k","G3","Z0","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","kk","gi3","t3","grad4","simplex","perm","F4","G4","n4","l","W0","w0","c1","c2","c3","c4","c5","c6","c","l1","l2","i3","j3","k3","l3","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4","Environment","vertexShader","fragmentShader","uniforms","THREE.Color","skyMaterial","THREE.ShaderMaterial","THREE.BackSide","skyGeometry","sky","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","hemisphereLight","THREE.HemisphereLight","geometry","THREE.PlaneGeometry","vertices","noiseHeight","falloffFactor","textureLoader","THREE.TextureLoader","repeatFactor","grassTexture","THREE.RepeatWrapping","terrainMaterial","terrain","height","radius","isStartMountain","THREE.ConeGeometry","minY","maxY","heightFactor","distFromCenter","topFlatteningFactor","noiseScale","noiseMagnitude","detailNoise","rockNoise","peakSmoothingFactor","normalizedX","normalizedZ","rockMaterial","snowMaterial","mountain","snowCapGeometry","snowCapVertices","snowThreshold","snowCap","mountainHeight","platformPosition","mountainPosition","mountainRadius","numRocks","minDistance","maxDistance","angle","rockSize","rockHeight","rockGeometry","vx","vy","vz","noise","rock","woodTexture","platformMaterial","startPlatformGeometry","startPlatform","endPlatformGeometry","endPlatform","platform","isStartPlatform","postMaterial","postGeometry","post","ropePoints","startPoint","endPoint","segments","maxSag","baseY","sag","ropeCurve","THREE.CatmullRomCurve3","ropeGeometry","THREE.TubeGeometry","ropeTexture","ropeMaterial","cloudMaterial","cloudGroup","numSpheres","sphereGeometry","sphere","cloudScale","cloud","Game","THREE.Scene","THREE.WebGLRenderer","THREE.PerspectiveCamera","width"],"mappings":"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G,EAAG,CAAG,EAC9H,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAG,EAC9H,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAG,EAC9H,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAG,EAC9H,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAG,EAC9H,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAC,EAAI,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAAG,EAAG,EAAG,CAAG,EAAE,CAAE,EAA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","x_google_ignoreList":[5]}